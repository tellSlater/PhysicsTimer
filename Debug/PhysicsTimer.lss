
PhysicsTimer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000642  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000642  000006d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800062  00800062  000006d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000708  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001235  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006df  00000000  00000000  000019c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000700  00000000  00000000  000020a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  000027a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006f6  00000000  00000000  00002890  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000933  00000000  00000000  00002f86  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000038b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	31 c0       	rjmp	.+98     	; 0x66 <__bad_interrupt>
   4:	30 c0       	rjmp	.+96     	; 0x66 <__bad_interrupt>
   6:	2f c0       	rjmp	.+94     	; 0x66 <__bad_interrupt>
   8:	2e c0       	rjmp	.+92     	; 0x66 <__bad_interrupt>
   a:	2d c0       	rjmp	.+90     	; 0x66 <__bad_interrupt>
   c:	3a c2       	rjmp	.+1140   	; 0x482 <__vector_6>
   e:	2b c0       	rjmp	.+86     	; 0x66 <__bad_interrupt>
  10:	2a c0       	rjmp	.+84     	; 0x66 <__bad_interrupt>
  12:	29 c0       	rjmp	.+82     	; 0x66 <__bad_interrupt>
  14:	28 c0       	rjmp	.+80     	; 0x66 <__bad_interrupt>
  16:	27 c0       	rjmp	.+78     	; 0x66 <__bad_interrupt>
  18:	26 c0       	rjmp	.+76     	; 0x66 <__bad_interrupt>
  1a:	25 c0       	rjmp	.+74     	; 0x66 <__bad_interrupt>
  1c:	24 c0       	rjmp	.+72     	; 0x66 <__bad_interrupt>
  1e:	23 c0       	rjmp	.+70     	; 0x66 <__bad_interrupt>
  20:	22 c0       	rjmp	.+68     	; 0x66 <__bad_interrupt>
  22:	21 c0       	rjmp	.+66     	; 0x66 <__bad_interrupt>
  24:	20 c0       	rjmp	.+64     	; 0x66 <__bad_interrupt>
  26:	1f c0       	rjmp	.+62     	; 0x66 <__bad_interrupt>
  28:	a9 c2       	rjmp	.+1362   	; 0x57c <__vector_20>

0000002a <__trampolines_end>:
  2a:	3f 06       	cpc	r3, r31
  2c:	5b 4f       	sbci	r21, 0xFB	; 251
  2e:	66 6d       	ori	r22, 0xD6	; 214
  30:	7d 07       	cpc	r23, r29
  32:	7f 6f       	ori	r23, 0xFF	; 255

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ed       	ldi	r28, 0xDF	; 223
  3a:	cd bf       	out	0x3d, r28	; 61

0000003c <__do_copy_data>:
  3c:	10 e0       	ldi	r17, 0x00	; 0
  3e:	a0 e6       	ldi	r26, 0x60	; 96
  40:	b0 e0       	ldi	r27, 0x00	; 0
  42:	e2 e4       	ldi	r30, 0x42	; 66
  44:	f6 e0       	ldi	r31, 0x06	; 6
  46:	02 c0       	rjmp	.+4      	; 0x4c <__SREG__+0xd>
  48:	05 90       	lpm	r0, Z+
  4a:	0d 92       	st	X+, r0
  4c:	a2 36       	cpi	r26, 0x62	; 98
  4e:	b1 07       	cpc	r27, r17
  50:	d9 f7       	brne	.-10     	; 0x48 <__SREG__+0x9>

00000052 <__do_clear_bss>:
  52:	20 e0       	ldi	r18, 0x00	; 0
  54:	a2 e6       	ldi	r26, 0x62	; 98
  56:	b0 e0       	ldi	r27, 0x00	; 0
  58:	01 c0       	rjmp	.+2      	; 0x5c <.do_clear_bss_start>

0000005a <.do_clear_bss_loop>:
  5a:	1d 92       	st	X+, r1

0000005c <.do_clear_bss_start>:
  5c:	a9 37       	cpi	r26, 0x79	; 121
  5e:	b2 07       	cpc	r27, r18
  60:	e1 f7       	brne	.-8      	; 0x5a <.do_clear_bss_loop>
  62:	94 d0       	rcall	.+296    	; 0x18c <main>
  64:	ec c2       	rjmp	.+1496   	; 0x63e <_exit>

00000066 <__bad_interrupt>:
  66:	cc cf       	rjmp	.-104    	; 0x0 <__vectors>

00000068 <_Z11SRwriteByteh>:
	else PORTB &= ~(1 << PINB4);
	_delay_us(1);
}

void SRwriteByte(uint8_t data) 			//Shift register write byte
{
  68:	98 e0       	ldi	r25, 0x08	; 8
	_delay_us(1);
}

inline void SRIN(bool x)				//Shift register input
{
	if (x) PORTB |= 1 << PINB4;
  6a:	88 23       	and	r24, r24
  6c:	14 f4       	brge	.+4      	; 0x72 <_Z11SRwriteByteh+0xa>
  6e:	c4 9a       	sbi	0x18, 4	; 24
  70:	01 c0       	rjmp	.+2      	; 0x74 <_Z11SRwriteByteh+0xc>
	else PORTB &= ~(1 << PINB4);
  72:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  74:	25 e0       	ldi	r18, 0x05	; 5
  76:	2a 95       	dec	r18
  78:	f1 f7       	brne	.-4      	; 0x76 <_Z11SRwriteByteh+0xe>
  7a:	00 00       	nop
	_delay_us(1);
}

inline void SRclock()					//Shift register clock data
{
	PORTB |= 1 << PINB6;
  7c:	c6 9a       	sbi	0x18, 6	; 24
  7e:	25 e0       	ldi	r18, 0x05	; 5
  80:	2a 95       	dec	r18
  82:	f1 f7       	brne	.-4      	; 0x80 <_Z11SRwriteByteh+0x18>
  84:	00 00       	nop
	_delay_us(1);
	PORTB &= ~(1 << PINB6);
  86:	c6 98       	cbi	0x18, 6	; 24
  88:	25 e0       	ldi	r18, 0x05	; 5
  8a:	2a 95       	dec	r18
  8c:	f1 f7       	brne	.-4      	; 0x8a <_Z11SRwriteByteh+0x22>
  8e:	00 00       	nop
{
	for (uint8_t i=0; i<8; ++i)
	{
		SRIN(data & 0x80);
		SRclock();
		data <<= 1; 
  90:	88 0f       	add	r24, r24
  92:	91 50       	subi	r25, 0x01	; 1
	_delay_us(1);
}

void SRwriteByte(uint8_t data) 			//Shift register write byte
{
	for (uint8_t i=0; i<8; ++i)
  94:	51 f7       	brne	.-44     	; 0x6a <_Z11SRwriteByteh+0x2>
	{
		SRIN(data & 0x80);
		SRclock();
		data <<= 1; 
	} 
}
  96:	08 95       	ret

00000098 <_Z10introBEEPSv>:
	PORTB |= (1 << d) & 0x0f;
}

inline void beeper(bool x)					//Changes beeper pin to 1 or 0 effectively turning the beeper on and off
{
	if (x) PORTD |= 1 << PINBEEPER;
  98:	92 9a       	sbi	0x12, 2	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	2f ef       	ldi	r18, 0xFF	; 255
  9c:	89 ef       	ldi	r24, 0xF9	; 249
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	80 40       	sbci	r24, 0x00	; 0
  a4:	90 40       	sbci	r25, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <_Z10introBEEPSv+0x8>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <_Z10introBEEPSv+0x12>
  aa:	00 00       	nop
	else PORTD &= ~(1 << PINBEEPER);
  ac:	92 98       	cbi	0x12, 2	; 18
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	83 ec       	ldi	r24, 0xC3	; 195
  b2:	99 e0       	ldi	r25, 0x09	; 9
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <_Z10introBEEPSv+0x1c>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <_Z10introBEEPSv+0x26>
  be:	00 00       	nop
	PORTB |= (1 << d) & 0x0f;
}

inline void beeper(bool x)					//Changes beeper pin to 1 or 0 effectively turning the beeper on and off
{
	if (x) PORTD |= 1 << PINBEEPER;
  c0:	92 9a       	sbi	0x12, 2	; 18
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	89 ef       	ldi	r24, 0xF9	; 249
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	80 40       	sbci	r24, 0x00	; 0
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <_Z10introBEEPSv+0x30>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <_Z10introBEEPSv+0x3a>
  d2:	00 00       	nop
	else PORTD &= ~(1 << PINBEEPER);
  d4:	92 98       	cbi	0x12, 2	; 18
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	81 ee       	ldi	r24, 0xE1	; 225
  da:	94 e0       	ldi	r25, 0x04	; 4
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <_Z10introBEEPSv+0x44>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <__stack+0x7>
  e6:	00 00       	nop
	PORTB |= (1 << d) & 0x0f;
}

inline void beeper(bool x)					//Changes beeper pin to 1 or 0 effectively turning the beeper on and off
{
	if (x) PORTD |= 1 << PINBEEPER;
  e8:	92 9a       	sbi	0x12, 2	; 18
  ea:	2f ef       	ldi	r18, 0xFF	; 255
  ec:	89 ef       	ldi	r24, 0xF9	; 249
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	80 40       	sbci	r24, 0x00	; 0
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <__stack+0x11>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <__stack+0x1b>
  fa:	00 00       	nop
	else PORTD &= ~(1 << PINBEEPER);
  fc:	92 98       	cbi	0x12, 2	; 18
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	81 ee       	ldi	r24, 0xE1	; 225
 102:	94 e0       	ldi	r25, 0x04	; 4
 104:	21 50       	subi	r18, 0x01	; 1
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <__stack+0x25>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <__stack+0x2f>
 10e:	00 00       	nop
	PORTB |= (1 << d) & 0x0f;
}

inline void beeper(bool x)					//Changes beeper pin to 1 or 0 effectively turning the beeper on and off
{
	if (x) PORTD |= 1 << PINBEEPER;
 110:	92 9a       	sbi	0x12, 2	; 18
 112:	2f ef       	ldi	r18, 0xFF	; 255
 114:	89 ef       	ldi	r24, 0xF9	; 249
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <__stack+0x39>
 120:	00 c0       	rjmp	.+0      	; 0x122 <__stack+0x43>
 122:	00 00       	nop
	else PORTD &= ~(1 << PINBEEPER);
 124:	92 98       	cbi	0x12, 2	; 18
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	83 ec       	ldi	r24, 0xC3	; 195
 12a:	99 e0       	ldi	r25, 0x09	; 9
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <__stack+0x4d>
 134:	00 c0       	rjmp	.+0      	; 0x136 <__stack+0x57>
 136:	00 00       	nop
	PORTB |= (1 << d) & 0x0f;
}

inline void beeper(bool x)					//Changes beeper pin to 1 or 0 effectively turning the beeper on and off
{
	if (x) PORTD |= 1 << PINBEEPER;
 138:	92 9a       	sbi	0x12, 2	; 18
 13a:	2f ef       	ldi	r18, 0xFF	; 255
 13c:	89 ef       	ldi	r24, 0xF9	; 249
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	21 50       	subi	r18, 0x01	; 1
 142:	80 40       	sbci	r24, 0x00	; 0
 144:	90 40       	sbci	r25, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <__stack+0x61>
 148:	00 c0       	rjmp	.+0      	; 0x14a <__stack+0x6b>
 14a:	00 00       	nop
	else PORTD &= ~(1 << PINBEEPER);
 14c:	92 98       	cbi	0x12, 2	; 18
 14e:	2f ef       	ldi	r18, 0xFF	; 255
 150:	83 ec       	ldi	r24, 0xC3	; 195
 152:	99 e0       	ldi	r25, 0x09	; 9
 154:	21 50       	subi	r18, 0x01	; 1
 156:	80 40       	sbci	r24, 0x00	; 0
 158:	90 40       	sbci	r25, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <__stack+0x75>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <__stack+0x7f>
 15e:	00 00       	nop
 160:	08 95       	ret

00000162 <_Z7doBEEPSv>:
	_delay_ms(200);
}

void doBEEPS()
{
	if (doBEEP)
 162:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <doBEEP>
 166:	88 23       	and	r24, r24
 168:	81 f0       	breq	.+32     	; 0x18a <_Z7doBEEPSv+0x28>
	PORTB |= (1 << d) & 0x0f;
}

inline void beeper(bool x)					//Changes beeper pin to 1 or 0 effectively turning the beeper on and off
{
	if (x) PORTD |= 1 << PINBEEPER;
 16a:	92 9a       	sbi	0x12, 2	; 18
 16c:	2f ef       	ldi	r18, 0xFF	; 255
 16e:	89 ef       	ldi	r24, 0xF9	; 249
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	21 50       	subi	r18, 0x01	; 1
 174:	80 40       	sbci	r24, 0x00	; 0
 176:	90 40       	sbci	r25, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <_Z7doBEEPSv+0x10>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <_Z7doBEEPSv+0x1a>
 17c:	00 00       	nop
	else PORTD &= ~(1 << PINBEEPER);
 17e:	92 98       	cbi	0x12, 2	; 18
void doBEEPS()
{
	if (doBEEP)
	{
		BEEP();
		--doBEEP;
 180:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <doBEEP>
 184:	81 50       	subi	r24, 0x01	; 1
 186:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <doBEEP>
 18a:	08 95       	ret

0000018c <main>:
	PCMSK2  = 0b00000000;
}

inline void setupTIMERS()
{
	TIMSK  = 0b00000010;   //overflow interrupt
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	89 bf       	out	0x39, r24	; 57
	TCCR0B = 0b00000010;   //clock source = CLK/256 , start PWM
 190:	83 bf       	out	0x33, r24	; 51
	TCCR0A = 0b00000011;   //PWM
 192:	83 e0       	ldi	r24, 0x03	; 3
 194:	80 bf       	out	0x30, r24	; 48

	MCUCR  = 0b01110000;  //Power down mode	
 196:	90 e7       	ldi	r25, 0x70	; 112
 198:	95 bf       	out	0x35, r25	; 53
	UCSRB = (0 << TXEN);
}

inline void setupPINS()	//Data direction registers and pull up resistor configuration
{
	GIMSK   = 0b00010000;	//Enable pin change 1 interrupts (used in later iteration of the code)
 19a:	90 e1       	ldi	r25, 0x10	; 16
 19c:	9b bf       	out	0x3b, r25	; 59
	
	DDRA	= 0b00000000;	//PINA0 sensorA input - PINA1 sensor B input
 19e:	1a ba       	out	0x1a, r1	; 26
	PORTA	= 0b00000011;
 1a0:	8b bb       	out	0x1b, r24	; 27
	DDRB	= 0b01111111;	//PINB4..6 shift register control (4 data, 5 latch, 6 clock) - PINB0..3 digit select
 1a2:	8f e7       	ldi	r24, 0x7F	; 127
 1a4:	87 bb       	out	0x17, r24	; 23
	PORTB	= 0b00000000;
 1a6:	18 ba       	out	0x18, r1	; 24
	DDRD	= 0b01000100;	//PIND2 beeper output - PIND3 button input - PIND0 provides vcc for  - PIND6 provides vcc for the shift register and sensors and is low during sleep - PIND5 toggled in interrupt
 1a8:	84 e4       	ldi	r24, 0x44	; 68
 1aa:	81 bb       	out	0x11, r24	; 17
 	PORTD	= 0b01011000;
 1ac:	88 e5       	ldi	r24, 0x58	; 88
 1ae:	82 bb       	out	0x12, r24	; 18
{
	//setupUART();	//Beeper cannot function using UART so we disable transmit with cltrans() - UART is for debuggig purposes
	setupTIMERS();
	setupPINS();
	
	CLKPR = 0x80;	//Enable prescaler change
 1b0:	80 e8       	ldi	r24, 0x80	; 128
 1b2:	86 bd       	out	0x26, r24	; 38
	CLKPR = 0x01;	//Prescale clock by /2
 1b4:	c1 e0       	ldi	r28, 0x01	; 1
 1b6:	c6 bd       	out	0x26, r28	; 38
	 
	sei();
 1b8:	78 94       	sei

	//cltrans();
	
	introBEEPS();
 1ba:	6e df       	rcall	.-292    	; 0x98 <_Z10introBEEPSv>
	timerSecs = 0;
}

inline void timerInit()
{
	timerState = 0;
 1bc:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <timerState>
	}
}

inline void timerReset()					//Resets the timer and sets to trigger position
{
	timerSleep = 0;
 1c0:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <timerSleep+0x1>
 1c4:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <timerSleep>
	timerState = 0;
 1c8:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <timerState>
	timerusecs = 0;
 1cc:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <timerusecs+0x1>
 1d0:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <timerusecs>
	timerMsecs = 0;
 1d4:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <timerMsecs+0x1>
 1d8:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <timerMsecs>
	timerSecs = 0;
 1dc:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <timerSecs>

inline void enableSensor(uint8_t x) //Takes 0 or 1 as input and enables sensor 0 or 1
{
	if (x <= 1)
	{
		PCMSK2  = 1 << x;
 1e0:	c5 b9       	out	0x05, r28	; 5
inline void timerInit()
{
	timerState = 0;
	timerReset();
	enableSensor(0);
	sensor0ArmedPosition = sensor0;
 1e2:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <sensor0>
 1e6:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <sensor0ArmedPosition>
	sensor1ArmedPosition = sensor1;
 1ea:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <sensor1>
 1ee:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <sensor1ArmedPosition>
{
	if (((*PINX & (1 << PINXno))) == 0)
	{
		if (!bState && timer > msDebounce)
		{
			bState = 1;
 1f2:	aa 24       	eor	r10, r10
 1f4:	a3 94       	inc	r10

inline void enableSensor(uint8_t x) //Takes 0 or 1 as input and enables sensor 0 or 1
{
	if (x <= 1)
	{
		PCMSK2  = 1 << x;
 1f6:	68 94       	set
 1f8:	88 24       	eor	r8, r8
 1fa:	81 f8       	bld	r8, 1
	digit >= 3? digit = 0 : ++digit;
}

inline void calcTimer()
{
	digits[0] = timerSecs % 10;
 1fc:	c7 e6       	ldi	r28, 0x67	; 103
 1fe:	d0 e0       	ldi	r29, 0x00	; 0
 200:	0f 2e       	mov	r0, r31
 202:	fa e0       	ldi	r31, 0x0A	; 10
 204:	bf 2e       	mov	r11, r31
 206:	f0 2d       	mov	r31, r0
	digits[1] = timerMsecs / 100;
 208:	0f 2e       	mov	r0, r31
 20a:	f4 e6       	ldi	r31, 0x64	; 100
 20c:	ef 2e       	mov	r14, r31
 20e:	f1 2c       	mov	r15, r1
 210:	f0 2d       	mov	r31, r0
	digits[2] = (timerMsecs % 100) / 10;
 212:	0a e0       	ldi	r16, 0x0A	; 10
 214:	10 e0       	ldi	r17, 0x00	; 0
}

inline void digitDisplayed(uint8_t d)		// 8.8.8.8. OFF  -  accepts 0-4 as input and displays the said digit or turns off for 4
{											// 0 1 2 3  4
	PORTB &= 0xf0;
	PORTB |= (1 << d) & 0x0f;
 216:	cc 24       	eor	r12, r12
 218:	c3 94       	inc	r12
 21a:	d1 2c       	mov	r13, r1
{
	if (((*PINX & (1 << PINXno))) == 0)
	{
		if (!bState && timer > msDebounce)
		{
			bState = 1;
 21c:	9a 2c       	mov	r9, r10
	timerSleep = 0;
}

inline void buttonCheck(bool& bState, volatile uint8_t& timer, volatile const uint8_t* PINX, const uint8_t PINXno, const uint8_t msDebounce = 50) //Software debounced button check
{
	if (((*PINX & (1 << PINXno))) == 0)
 21e:	83 99       	sbic	0x10, 3	; 16
 220:	45 c0       	rjmp	.+138    	; 0x2ac <main+0x120>
	{
		if (!bState && timer > msDebounce)
 222:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <buttonState>
 226:	81 11       	cpse	r24, r1
 228:	4a c0       	rjmp	.+148    	; 0x2be <main+0x132>
 22a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <timerButton>
 22e:	83 33       	cpi	r24, 0x33	; 51
 230:	08 f0       	brcs	.+2      	; 0x234 <main+0xa8>
 232:	0c c1       	rjmp	.+536    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 234:	44 c0       	rjmp	.+136    	; 0x2be <main+0x132>
	sensor1ArmedPosition = sensor1;
}

inline void buttonAction()
{
	timerState >= 2? timerState = 0 : ++timerState;
 236:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <timerState>
 23a:	05 c0       	rjmp	.+10     	; 0x246 <main+0xba>
 23c:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <timerState>
 240:	8f 5f       	subi	r24, 0xFF	; 255
 242:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <timerState>
	if (timerState == 0)
 246:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <timerState>
 24a:	81 11       	cpse	r24, r1
 24c:	1a c0       	rjmp	.+52     	; 0x282 <main+0xf6>
	}
}

inline void timerReset()					//Resets the timer and sets to trigger position
{
	timerSleep = 0;
 24e:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <timerSleep+0x1>
 252:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <timerSleep>
	timerState = 0;
 256:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <timerState>
	timerusecs = 0;
 25a:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <timerusecs+0x1>
 25e:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <timerusecs>
	timerMsecs = 0;
 262:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <timerMsecs+0x1>
 266:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <timerMsecs>
	timerSecs = 0;
 26a:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <timerSecs>

inline void enableSensor(uint8_t x) //Takes 0 or 1 as input and enables sensor 0 or 1
{
	if (x <= 1)
	{
		PCMSK2  = 1 << x;
 26e:	a5 b8       	out	0x05, r10	; 5
	timerState >= 2? timerState = 0 : ++timerState;
	if (timerState == 0)
	{
		timerReset();
		enableSensor(0);
		sensor0ArmedPosition = sensor0;
 270:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <sensor0>
 274:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <sensor0ArmedPosition>
		sensor1ArmedPosition = sensor1;
 278:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <sensor1>
 27c:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <sensor1ArmedPosition>
 280:	05 c0       	rjmp	.+10     	; 0x28c <main+0x100>
	}
	else if (timerState == 1) enableSensor(1);
 282:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <timerState>
 286:	81 30       	cpi	r24, 0x01	; 1
 288:	09 f4       	brne	.+2      	; 0x28c <main+0x100>

inline void enableSensor(uint8_t x) //Takes 0 or 1 as input and enables sensor 0 or 1
{
	if (x <= 1)
	{
		PCMSK2  = 1 << x;
 28a:	85 b8       	out	0x05, r8	; 5
	PORTB |= (1 << d) & 0x0f;
}

inline void beeper(bool x)					//Changes beeper pin to 1 or 0 effectively turning the beeper on and off
{
	if (x) PORTD |= 1 << PINBEEPER;
 28c:	92 9a       	sbi	0x12, 2	; 18
 28e:	2f ef       	ldi	r18, 0xFF	; 255
 290:	39 ef       	ldi	r19, 0xF9	; 249
 292:	40 e0       	ldi	r20, 0x00	; 0
 294:	21 50       	subi	r18, 0x01	; 1
 296:	30 40       	sbci	r19, 0x00	; 0
 298:	40 40       	sbci	r20, 0x00	; 0
 29a:	e1 f7       	brne	.-8      	; 0x294 <main+0x108>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <main+0x112>
 29e:	00 00       	nop
	else PORTD &= ~(1 << PINBEEPER);
 2a0:	92 98       	cbi	0x12, 2	; 18
		sensor0ArmedPosition = sensor0;
		sensor1ArmedPosition = sensor1;
	}
	else if (timerState == 1) enableSensor(1);
	BEEP();
	timerSleep = 0;
 2a2:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <timerSleep+0x1>
 2a6:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <timerSleep>
 2aa:	09 c0       	rjmp	.+18     	; 0x2be <main+0x132>
			buttonAction();
		}
	}
	else
	{
		if (bState && (timer > msDebounce))
 2ac:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <buttonState>
 2b0:	88 23       	and	r24, r24
 2b2:	29 f0       	breq	.+10     	; 0x2be <main+0x132>
 2b4:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <timerButton>
 2b8:	83 33       	cpi	r24, 0x33	; 51
 2ba:	08 f0       	brcs	.+2      	; 0x2be <main+0x132>
 2bc:	d1 c0       	rjmp	.+418    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
	digit >= 3? digit = 0 : ++digit;
}

inline void calcTimer()
{
	digits[0] = timerSecs % 10;
 2be:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <timerSecs>
 2c2:	6b 2d       	mov	r22, r11
 2c4:	9c d1       	rcall	.+824    	; 0x5fe <__udivmodqi4>
 2c6:	98 83       	st	Y, r25
	digits[1] = timerMsecs / 100;
 2c8:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <timerMsecs>
 2cc:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <timerMsecs+0x1>
 2d0:	b7 01       	movw	r22, r14
 2d2:	a1 d1       	rcall	.+834    	; 0x616 <__udivmodhi4>
 2d4:	69 83       	std	Y+1, r22	; 0x01
	digits[2] = (timerMsecs % 100) / 10;
 2d6:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <timerMsecs>
 2da:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <timerMsecs+0x1>
 2de:	b7 01       	movw	r22, r14
 2e0:	9a d1       	rcall	.+820    	; 0x616 <__udivmodhi4>
 2e2:	b8 01       	movw	r22, r16
 2e4:	98 d1       	rcall	.+816    	; 0x616 <__udivmodhi4>
 2e6:	6a 83       	std	Y+2, r22	; 0x02
	digits[3] = timerMsecs % 10;
 2e8:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <timerMsecs>
 2ec:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <timerMsecs+0x1>
 2f0:	b8 01       	movw	r22, r16
 2f2:	91 d1       	rcall	.+802    	; 0x616 <__udivmodhi4>
 2f4:	8b 83       	std	Y+3, r24	; 0x03

inline void displayTimer()
{
	static uint8_t digit = 0;
	
	uint8_t toDisplay = ~pgm_read_byte( &displayBitmap[ digits[digit] ] );
 2f6:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <_ZZ12displayTimervE5digit>
 2fa:	e9 2f       	mov	r30, r25
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	e9 59       	subi	r30, 0x99	; 153
 300:	ff 4f       	sbci	r31, 0xFF	; 255
 302:	e0 81       	ld	r30, Z
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	e6 5d       	subi	r30, 0xD6	; 214
 308:	ff 4f       	sbci	r31, 0xFF	; 255
 30a:	84 91       	lpm	r24, Z
 30c:	80 95       	com	r24
	
	if (digit == 0) toDisplay &= ~0x80;
 30e:	91 11       	cpse	r25, r1
 310:	07 c0       	rjmp	.+14     	; 0x320 <main+0x194>
 312:	8f 77       	andi	r24, 0x7F	; 127
	
	static uint8_t blinkmask = 0xff;
	if (timerState == 0)
 314:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <timerState>
 318:	22 23       	and	r18, r18
 31a:	09 f4       	brne	.+2      	; 0x31e <main+0x192>
 31c:	a6 c0       	rjmp	.+332    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 31e:	24 c0       	rjmp	.+72     	; 0x368 <main+0x1dc>
 320:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <timerState>
 324:	21 11       	cpse	r18, r1
 326:	11 c0       	rjmp	.+34     	; 0x34a <main+0x1be>
	{
		toDisplay |= blinkmask;
 328:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 32c:	82 2b       	or	r24, r18
		if (timerDisplay >= 790)
 32e:	40 91 77 00 	lds	r20, 0x0077	; 0x800077 <timerDisplay>
 332:	50 91 78 00 	lds	r21, 0x0078	; 0x800078 <timerDisplay+0x1>
 336:	46 31       	cpi	r20, 0x16	; 22
 338:	53 40       	sbci	r21, 0x03	; 3
 33a:	38 f0       	brcs	.+14     	; 0x34a <main+0x1be>
		{
			blinkmask ^= 0xff;
 33c:	20 95       	com	r18
 33e:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
			timerDisplay = 0;
 342:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <timerDisplay+0x1>
 346:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <timerDisplay>
		}
	}
	
	if (digit == 2)
 34a:	92 30       	cpi	r25, 0x02	; 2
 34c:	31 f4       	brne	.+12     	; 0x35a <main+0x1ce>
	{
		if (PIND & (1 << PIND1)) toDisplay |= 0x80;
 34e:	81 9b       	sbis	0x10, 1	; 16
 350:	02 c0       	rjmp	.+4      	; 0x356 <main+0x1ca>
 352:	80 68       	ori	r24, 0x80	; 128
 354:	09 c0       	rjmp	.+18     	; 0x368 <main+0x1dc>
		else toDisplay &= ~0x80;
 356:	8f 77       	andi	r24, 0x7F	; 127
 358:	07 c0       	rjmp	.+14     	; 0x368 <main+0x1dc>
	}
	else if (digit == 3)
 35a:	93 30       	cpi	r25, 0x03	; 3
 35c:	29 f4       	brne	.+10     	; 0x368 <main+0x1dc>
	{		
		if (PIND & (1 << PIND0)) toDisplay |= 0x80;
 35e:	80 9b       	sbis	0x10, 0	; 16
 360:	02 c0       	rjmp	.+4      	; 0x366 <main+0x1da>
 362:	80 68       	ori	r24, 0x80	; 128
 364:	01 c0       	rjmp	.+2      	; 0x368 <main+0x1dc>
		else toDisplay &= ~0x80;
 366:	8f 77       	andi	r24, 0x7F	; 127
	}
	
	SRwriteByte(toDisplay);
 368:	7f de       	rcall	.-770    	; 0x68 <_Z11SRwriteByteh>
	} 
}

inline void digitDisplayed(uint8_t d)		// 8.8.8.8. OFF  -  accepts 0-4 as input and displays the said digit or turns off for 4
{											// 0 1 2 3  4
	PORTB &= 0xf0;
 36a:	88 b3       	in	r24, 0x18	; 24
 36c:	80 7f       	andi	r24, 0xF0	; 240
 36e:	88 bb       	out	0x18, r24	; 24
	PORTB |= (1 << d) & 0x0f;
 370:	88 b3       	in	r24, 0x18	; 24
 372:	88 bb       	out	0x18, r24	; 24
	MCUCR  = 0b01110000;  //Power down mode	
}

inline void SRlatch()					//Shift register latch
{
	PORTB |= 1 << PINB5;
 374:	c5 9a       	sbi	0x18, 5	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 376:	45 e0       	ldi	r20, 0x05	; 5
 378:	4a 95       	dec	r20
 37a:	f1 f7       	brne	.-4      	; 0x378 <main+0x1ec>
 37c:	00 00       	nop
	_delay_us(1);
	PORTB &= ~(1 << PINB5);
 37e:	c5 98       	cbi	0x18, 5	; 24
 380:	55 e0       	ldi	r21, 0x05	; 5
 382:	5a 95       	dec	r21
 384:	f1 f7       	brne	.-4      	; 0x382 <main+0x1f6>
 386:	00 00       	nop
	}
	
	SRwriteByte(toDisplay);
	digitDisplayed(4);
	SRlatch();
	digitDisplayed(digit);
 388:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <_ZZ12displayTimervE5digit>
	} 
}

inline void digitDisplayed(uint8_t d)		// 8.8.8.8. OFF  -  accepts 0-4 as input and displays the said digit or turns off for 4
{											// 0 1 2 3  4
	PORTB &= 0xf0;
 38c:	88 b3       	in	r24, 0x18	; 24
 38e:	80 7f       	andi	r24, 0xF0	; 240
 390:	88 bb       	out	0x18, r24	; 24
	PORTB |= (1 << d) & 0x0f;
 392:	98 b3       	in	r25, 0x18	; 24
 394:	a6 01       	movw	r20, r12
 396:	02 c0       	rjmp	.+4      	; 0x39c <main+0x210>
 398:	44 0f       	add	r20, r20
 39a:	55 1f       	adc	r21, r21
 39c:	2a 95       	dec	r18
 39e:	e2 f7       	brpl	.-8      	; 0x398 <main+0x20c>
 3a0:	84 2f       	mov	r24, r20
 3a2:	8f 70       	andi	r24, 0x0F	; 15
 3a4:	89 2b       	or	r24, r25
 3a6:	88 bb       	out	0x18, r24	; 24
	SRwriteByte(toDisplay);
	digitDisplayed(4);
	SRlatch();
	digitDisplayed(digit);
	
	digit >= 3? digit = 0 : ++digit;
 3a8:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <_ZZ12displayTimervE5digit>
 3ac:	83 30       	cpi	r24, 0x03	; 3
 3ae:	18 f0       	brcs	.+6      	; 0x3b6 <main+0x22a>
 3b0:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <_ZZ12displayTimervE5digit>
 3b4:	03 c0       	rjmp	.+6      	; 0x3bc <main+0x230>
 3b6:	8f 5f       	subi	r24, 0xFF	; 255
 3b8:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <_ZZ12displayTimervE5digit>
		
		calcTimer();
		
		displayTimer();
		
		doBEEPS();
 3bc:	d2 de       	rcall	.-604    	; 0x162 <_Z7doBEEPSv>
		
		//readSensors(); //Used for buffered sensor input
		
		//sensorAction(); //Used for buffered sensor input
		
		if (timerSleep > 60000)
 3be:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <timerSleep>
 3c2:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <timerSleep+0x1>
 3c6:	81 36       	cpi	r24, 0x61	; 97
 3c8:	9a 4e       	sbci	r25, 0xEA	; 234
 3ca:	08 f4       	brcc	.+2      	; 0x3ce <main+0x242>
 3cc:	28 cf       	rjmp	.-432    	; 0x21e <main+0x92>
 	PORTD	= 0b01011000;
}

inline void setupPINSsleep()	//Data direction registers and pull up resistor configuration for sleep
{
	GIMSK   = 0b10000000;	//Enable INT1 interrupt so that the pushbutton can trigger it and wake up the chip
 3ce:	80 e8       	ldi	r24, 0x80	; 128
 3d0:	8b bf       	out	0x3b, r24	; 59
	PCMSK2  = 0b00000000;	//Disable sensors (used in later iteration of the code)
 3d2:	15 b8       	out	0x05, r1	; 5
	
	DDRA	= 0b00000000;	//Set all pins to tri state without pull up resistors
 3d4:	1a ba       	out	0x1a, r1	; 26
	PORTA	= 0b00000000;
 3d6:	1b ba       	out	0x1b, r1	; 27
	DDRB	= 0b00000000;	
 3d8:	17 ba       	out	0x17, r1	; 23
	PORTB	= 0b00000000;
 3da:	18 ba       	out	0x18, r1	; 24
	DDRD	= 0b00000000;	
 3dc:	11 ba       	out	0x11, r1	; 17
	PORTD	= 0b00011000;
 3de:	88 e1       	ldi	r24, 0x18	; 24
 3e0:	82 bb       	out	0x12, r24	; 18
	}
}

inline void disableSensors()		//Disables all sensors
{
	PCMSK2  = 0b00000000;
 3e2:	15 b8       	out	0x05, r1	; 5
		
		if (timerSleep > 60000)
		{
			setupPINSsleep();
			disableSensors();
			timerSleep = 0;
 3e4:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <timerSleep+0x1>
 3e8:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <timerSleep>
			sleep_mode();
 3ec:	85 b7       	in	r24, 0x35	; 53
 3ee:	80 62       	ori	r24, 0x20	; 32
 3f0:	85 bf       	out	0x35, r24	; 53
 3f2:	88 95       	sleep
 3f4:	85 b7       	in	r24, 0x35	; 53
 3f6:	8f 7d       	andi	r24, 0xDF	; 223
 3f8:	85 bf       	out	0x35, r24	; 53
	UCSRB = (0 << TXEN);
}

inline void setupPINS()	//Data direction registers and pull up resistor configuration
{
	GIMSK   = 0b00010000;	//Enable pin change 1 interrupts (used in later iteration of the code)
 3fa:	80 e1       	ldi	r24, 0x10	; 16
 3fc:	8b bf       	out	0x3b, r24	; 59
	
	DDRA	= 0b00000000;	//PINA0 sensorA input - PINA1 sensor B input
 3fe:	1a ba       	out	0x1a, r1	; 26
	PORTA	= 0b00000011;
 400:	83 e0       	ldi	r24, 0x03	; 3
 402:	8b bb       	out	0x1b, r24	; 27
	DDRB	= 0b01111111;	//PINB4..6 shift register control (4 data, 5 latch, 6 clock) - PINB0..3 digit select
 404:	8f e7       	ldi	r24, 0x7F	; 127
 406:	87 bb       	out	0x17, r24	; 23
	PORTB	= 0b00000000;
 408:	18 ba       	out	0x18, r1	; 24
	DDRD	= 0b01000100;	//PIND2 beeper output - PIND3 button input - PIND0 provides vcc for  - PIND6 provides vcc for the shift register and sensors and is low during sleep - PIND5 toggled in interrupt
 40a:	84 e4       	ldi	r24, 0x44	; 68
 40c:	81 bb       	out	0x11, r24	; 17
 	PORTD	= 0b01011000;
 40e:	88 e5       	ldi	r24, 0x58	; 88
 410:	82 bb       	out	0x12, r24	; 18
	timerSecs = 0;
}

inline void timerInit()
{
	timerState = 0;
 412:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <timerState>
	}
}

inline void timerReset()					//Resets the timer and sets to trigger position
{
	timerSleep = 0;
 416:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <timerSleep+0x1>
 41a:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <timerSleep>
	timerState = 0;
 41e:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <timerState>
	timerusecs = 0;
 422:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <timerusecs+0x1>
 426:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <timerusecs>
	timerMsecs = 0;
 42a:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <timerMsecs+0x1>
 42e:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <timerMsecs>
	timerSecs = 0;
 432:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <timerSecs>

inline void enableSensor(uint8_t x) //Takes 0 or 1 as input and enables sensor 0 or 1
{
	if (x <= 1)
	{
		PCMSK2  = 1 << x;
 436:	a5 b8       	out	0x05, r10	; 5
inline void timerInit()
{
	timerState = 0;
	timerReset();
	enableSensor(0);
	sensor0ArmedPosition = sensor0;
 438:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <sensor0>
 43c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <sensor0ArmedPosition>
	sensor1ArmedPosition = sensor1;
 440:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <sensor1>
 444:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <sensor1ArmedPosition>
			disableSensors();
			timerSleep = 0;
			sleep_mode();
			setupPINS();
			timerInit();
			introBEEPS();
 448:	27 de       	rcall	.-946    	; 0x98 <_Z10introBEEPSv>
 44a:	e9 ce       	rjmp	.-558    	; 0x21e <main+0x92>
{
	if (((*PINX & (1 << PINXno))) == 0)
	{
		if (!bState && timer > msDebounce)
		{
			bState = 1;
 44c:	90 92 70 00 	sts	0x0070, r9	; 0x800070 <buttonState>
			timer = 0;
 450:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <timerButton>
	sensor1ArmedPosition = sensor1;
}

inline void buttonAction()
{
	timerState >= 2? timerState = 0 : ++timerState;
 454:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <timerState>
 458:	82 30       	cpi	r24, 0x02	; 2
 45a:	08 f0       	brcs	.+2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 45c:	ec ce       	rjmp	.-552    	; 0x236 <main+0xaa>
 45e:	ee ce       	rjmp	.-548    	; 0x23c <main+0xb0>
	}
	else
	{
		if (bState && (timer > msDebounce))
		{
			bState = 0;
 460:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <buttonState>
			timer = 0;
 464:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <timerButton>
 468:	2a cf       	rjmp	.-428    	; 0x2be <main+0x132>
	if (digit == 0) toDisplay &= ~0x80;
	
	static uint8_t blinkmask = 0xff;
	if (timerState == 0)
	{
		toDisplay |= blinkmask;
 46a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 46e:	82 2b       	or	r24, r18
		if (timerDisplay >= 790)
 470:	40 91 77 00 	lds	r20, 0x0077	; 0x800077 <timerDisplay>
 474:	50 91 78 00 	lds	r21, 0x0078	; 0x800078 <timerDisplay+0x1>
 478:	46 31       	cpi	r20, 0x16	; 22
 47a:	53 40       	sbci	r21, 0x03	; 3
 47c:	08 f0       	brcs	.+2      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 47e:	5e cf       	rjmp	.-324    	; 0x33c <main+0x1b0>
 480:	73 cf       	rjmp	.-282    	; 0x368 <main+0x1dc>

00000482 <__vector_6>:
		}
	}
}

ISR (TIMER0_OVF_vect)
{
 482:	1f 92       	push	r1
 484:	0f 92       	push	r0
 486:	0f b6       	in	r0, 0x3f	; 63
 488:	0f 92       	push	r0
 48a:	11 24       	eor	r1, r1
 48c:	0f 93       	push	r16
 48e:	1f 93       	push	r17
 490:	2f 93       	push	r18
 492:	3f 93       	push	r19
 494:	5f 93       	push	r21
 496:	6f 93       	push	r22
 498:	7f 93       	push	r23
 49a:	8f 93       	push	r24
 49c:	9f 93       	push	r25
 49e:	af 93       	push	r26
 4a0:	bf 93       	push	r27
 4a2:	cf 93       	push	r28
 4a4:	df 93       	push	r29
 4a6:	ef 93       	push	r30
 4a8:	ff 93       	push	r31
	PORTD ^= 1 << PIND5;
 4aa:	92 b3       	in	r25, 0x12	; 18
 4ac:	80 e2       	ldi	r24, 0x20	; 32
 4ae:	89 27       	eor	r24, r25
 4b0:	82 bb       	out	0x12, r24	; 18
	
	static uint8_t smallTimer = 0;
	++smallTimer;
 4b2:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__data_end>
 4b6:	2f 5f       	subi	r18, 0xFF	; 255
 4b8:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__data_end>
	
	if (timerState == 1)
 4bc:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <timerState>
 4c0:	81 30       	cpi	r24, 0x01	; 1
 4c2:	69 f5       	brne	.+90     	; 0x51e <__vector_6+0x9c>
	{
		timerusecs += 256;
 4c4:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <timerusecs>
 4c8:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <timerusecs+0x1>
 4cc:	93 95       	inc	r25
		timerMsecs += timerusecs/1000;
 4ce:	c0 91 73 00 	lds	r28, 0x0073	; 0x800073 <timerMsecs>
 4d2:	d0 91 74 00 	lds	r29, 0x0074	; 0x800074 <timerMsecs+0x1>
 4d6:	e8 ee       	ldi	r30, 0xE8	; 232
 4d8:	f3 e0       	ldi	r31, 0x03	; 3
 4da:	bf 01       	movw	r22, r30
 4dc:	9c d0       	rcall	.+312    	; 0x616 <__udivmodhi4>
 4de:	8c 01       	movw	r16, r24
 4e0:	c6 0f       	add	r28, r22
 4e2:	d7 1f       	adc	r29, r23
 4e4:	d0 93 74 00 	sts	0x0074, r29	; 0x800074 <timerMsecs+0x1>
 4e8:	c0 93 73 00 	sts	0x0073, r28	; 0x800073 <timerMsecs>
		timerSecs += timerMsecs/1000;
 4ec:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <timerMsecs>
 4f0:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <timerMsecs+0x1>
 4f4:	30 91 75 00 	lds	r19, 0x0075	; 0x800075 <timerSecs>
 4f8:	bf 01       	movw	r22, r30
 4fa:	8d d0       	rcall	.+282    	; 0x616 <__udivmodhi4>
 4fc:	63 0f       	add	r22, r19
 4fe:	60 93 75 00 	sts	0x0075, r22	; 0x800075 <timerSecs>
		timerusecs %= 1000;
 502:	10 93 72 00 	sts	0x0072, r17	; 0x800072 <timerusecs+0x1>
 506:	00 93 71 00 	sts	0x0071, r16	; 0x800071 <timerusecs>
		timerMsecs %= 1000;
 50a:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <timerMsecs>
 50e:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <timerMsecs+0x1>
 512:	bf 01       	movw	r22, r30
 514:	80 d0       	rcall	.+256    	; 0x616 <__udivmodhi4>
 516:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <timerMsecs+0x1>
 51a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <timerMsecs>
	}	
	
	if (smallTimer>=4) //milliseconds increment here (4 * 263us)
 51e:	24 30       	cpi	r18, 0x04	; 4
 520:	c8 f0       	brcs	.+50     	; 0x554 <__vector_6+0xd2>
	{
		smallTimer = 0;
 522:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
		++timerButton;
 526:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <timerButton>
 52a:	8f 5f       	subi	r24, 0xFF	; 255
 52c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <timerButton>
		++timerDisplay;
 530:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <timerDisplay>
 534:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <timerDisplay+0x1>
 538:	01 96       	adiw	r24, 0x01	; 1
 53a:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <timerDisplay+0x1>
 53e:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <timerDisplay>
		++timerSleep;
 542:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <timerSleep>
 546:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <timerSleep+0x1>
 54a:	01 96       	adiw	r24, 0x01	; 1
 54c:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <timerSleep+0x1>
 550:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <timerSleep>
	}
}
 554:	ff 91       	pop	r31
 556:	ef 91       	pop	r30
 558:	df 91       	pop	r29
 55a:	cf 91       	pop	r28
 55c:	bf 91       	pop	r27
 55e:	af 91       	pop	r26
 560:	9f 91       	pop	r25
 562:	8f 91       	pop	r24
 564:	7f 91       	pop	r23
 566:	6f 91       	pop	r22
 568:	5f 91       	pop	r21
 56a:	3f 91       	pop	r19
 56c:	2f 91       	pop	r18
 56e:	1f 91       	pop	r17
 570:	0f 91       	pop	r16
 572:	0f 90       	pop	r0
 574:	0f be       	out	0x3f, r0	; 63
 576:	0f 90       	pop	r0
 578:	1f 90       	pop	r1
 57a:	18 95       	reti

0000057c <__vector_20>:

ISR (PCINT2_vect)
{
 57c:	1f 92       	push	r1
 57e:	0f 92       	push	r0
 580:	0f b6       	in	r0, 0x3f	; 63
 582:	0f 92       	push	r0
 584:	11 24       	eor	r1, r1
 586:	2f 93       	push	r18
 588:	3f 93       	push	r19
 58a:	8f 93       	push	r24
 58c:	9f 93       	push	r25
	}
}

inline void disableSensors()		//Disables all sensors
{
	PCMSK2  = 0b00000000;
 58e:	15 b8       	out	0x05, r1	; 5

ISR (PCINT2_vect)
{
	disableSensors();
	
	if (timerState == 0)
 590:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <timerState>
 594:	81 11       	cpse	r24, r1
 596:	0b c0       	rjmp	.+22     	; 0x5ae <__vector_20+0x32>
	{
		timerState = 1;
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <timerState>

inline void enableSensor(uint8_t x) //Takes 0 or 1 as input and enables sensor 0 or 1
{
	if (x <= 1)
	{
		PCMSK2  = 1 << x;
 59e:	82 e0       	ldi	r24, 0x02	; 2
 5a0:	85 b9       	out	0x05, r24	; 5
	
	if (timerState == 0)
	{
		timerState = 1;
		enableSensor(1);
		++doBEEP;
 5a2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <doBEEP>
 5a6:	8f 5f       	subi	r24, 0xFF	; 255
 5a8:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <doBEEP>
 5ac:	19 c0       	rjmp	.+50     	; 0x5e0 <__vector_20+0x64>
	}
	else if (timerState == 1)
 5ae:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <timerState>
 5b2:	81 30       	cpi	r24, 0x01	; 1
 5b4:	a9 f4       	brne	.+42     	; 0x5e0 <__vector_20+0x64>
	{
		if (sensor0ArmedPosition != (PIND & (1 << PIND1)))
 5b6:	80 b3       	in	r24, 0x10	; 16
 5b8:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <sensor0ArmedPosition>
 5bc:	30 e0       	ldi	r19, 0x00	; 0
 5be:	82 70       	andi	r24, 0x02	; 2
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	28 17       	cp	r18, r24
 5c4:	39 07       	cpc	r19, r25
 5c6:	51 f0       	breq	.+20     	; 0x5dc <__vector_20+0x60>
		{
			timerState = 2;
 5c8:	82 e0       	ldi	r24, 0x02	; 2
 5ca:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <timerState>
	}
}

inline void disableSensors()		//Disables all sensors
{
	PCMSK2  = 0b00000000;
 5ce:	15 b8       	out	0x05, r1	; 5
	{
		if (sensor0ArmedPosition != (PIND & (1 << PIND1)))
		{
			timerState = 2;
			disableSensors();
			++doBEEP;			
 5d0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <doBEEP>
 5d4:	8f 5f       	subi	r24, 0xFF	; 255
 5d6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <doBEEP>
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <__vector_20+0x64>

inline void enableSensor(uint8_t x) //Takes 0 or 1 as input and enables sensor 0 or 1
{
	if (x <= 1)
	{
		PCMSK2  = 1 << x;
 5dc:	82 e0       	ldi	r24, 0x02	; 2
 5de:	85 b9       	out	0x05, r24	; 5
			++doBEEP;			
		}
		else enableSensor(1);
	}
	
	timerSleep = 0;
 5e0:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <timerSleep+0x1>
 5e4:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <timerSleep>
	GIFR = 1 << PCIF2;
 5e8:	80 e1       	ldi	r24, 0x10	; 16
 5ea:	8a bf       	out	0x3a, r24	; 58
}
 5ec:	9f 91       	pop	r25
 5ee:	8f 91       	pop	r24
 5f0:	3f 91       	pop	r19
 5f2:	2f 91       	pop	r18
 5f4:	0f 90       	pop	r0
 5f6:	0f be       	out	0x3f, r0	; 63
 5f8:	0f 90       	pop	r0
 5fa:	1f 90       	pop	r1
 5fc:	18 95       	reti

000005fe <__udivmodqi4>:
 5fe:	99 1b       	sub	r25, r25
 600:	79 e0       	ldi	r23, 0x09	; 9
 602:	04 c0       	rjmp	.+8      	; 0x60c <__udivmodqi4_ep>

00000604 <__udivmodqi4_loop>:
 604:	99 1f       	adc	r25, r25
 606:	96 17       	cp	r25, r22
 608:	08 f0       	brcs	.+2      	; 0x60c <__udivmodqi4_ep>
 60a:	96 1b       	sub	r25, r22

0000060c <__udivmodqi4_ep>:
 60c:	88 1f       	adc	r24, r24
 60e:	7a 95       	dec	r23
 610:	c9 f7       	brne	.-14     	; 0x604 <__udivmodqi4_loop>
 612:	80 95       	com	r24
 614:	08 95       	ret

00000616 <__udivmodhi4>:
 616:	aa 1b       	sub	r26, r26
 618:	bb 1b       	sub	r27, r27
 61a:	51 e1       	ldi	r21, 0x11	; 17
 61c:	07 c0       	rjmp	.+14     	; 0x62c <__udivmodhi4_ep>

0000061e <__udivmodhi4_loop>:
 61e:	aa 1f       	adc	r26, r26
 620:	bb 1f       	adc	r27, r27
 622:	a6 17       	cp	r26, r22
 624:	b7 07       	cpc	r27, r23
 626:	10 f0       	brcs	.+4      	; 0x62c <__udivmodhi4_ep>
 628:	a6 1b       	sub	r26, r22
 62a:	b7 0b       	sbc	r27, r23

0000062c <__udivmodhi4_ep>:
 62c:	88 1f       	adc	r24, r24
 62e:	99 1f       	adc	r25, r25
 630:	5a 95       	dec	r21
 632:	a9 f7       	brne	.-22     	; 0x61e <__udivmodhi4_loop>
 634:	80 95       	com	r24
 636:	90 95       	com	r25
 638:	bc 01       	movw	r22, r24
 63a:	cd 01       	movw	r24, r26
 63c:	08 95       	ret

0000063e <_exit>:
 63e:	f8 94       	cli

00000640 <__stop_program>:
 640:	ff cf       	rjmp	.-2      	; 0x640 <__stop_program>

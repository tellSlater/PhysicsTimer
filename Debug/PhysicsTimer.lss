
PhysicsTimer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000618  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000618  000006ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800062  00800062  000006ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000720  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001233  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006dd  00000000  00000000  0000199b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000700  00000000  00000000  00002078  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00002778  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006f6  00000000  00000000  00002864  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000933  00000000  00000000  00002f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000388d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	31 c0       	rjmp	.+98     	; 0x66 <__bad_interrupt>
   4:	30 c0       	rjmp	.+96     	; 0x66 <__bad_interrupt>
   6:	2f c0       	rjmp	.+94     	; 0x66 <__bad_interrupt>
   8:	2e c0       	rjmp	.+92     	; 0x66 <__bad_interrupt>
   a:	2d c0       	rjmp	.+90     	; 0x66 <__bad_interrupt>
   c:	25 c2       	rjmp	.+1098   	; 0x458 <__vector_6>
   e:	2b c0       	rjmp	.+86     	; 0x66 <__bad_interrupt>
  10:	2a c0       	rjmp	.+84     	; 0x66 <__bad_interrupt>
  12:	29 c0       	rjmp	.+82     	; 0x66 <__bad_interrupt>
  14:	28 c0       	rjmp	.+80     	; 0x66 <__bad_interrupt>
  16:	27 c0       	rjmp	.+78     	; 0x66 <__bad_interrupt>
  18:	26 c0       	rjmp	.+76     	; 0x66 <__bad_interrupt>
  1a:	25 c0       	rjmp	.+74     	; 0x66 <__bad_interrupt>
  1c:	24 c0       	rjmp	.+72     	; 0x66 <__bad_interrupt>
  1e:	23 c0       	rjmp	.+70     	; 0x66 <__bad_interrupt>
  20:	22 c0       	rjmp	.+68     	; 0x66 <__bad_interrupt>
  22:	21 c0       	rjmp	.+66     	; 0x66 <__bad_interrupt>
  24:	20 c0       	rjmp	.+64     	; 0x66 <__bad_interrupt>
  26:	1f c0       	rjmp	.+62     	; 0x66 <__bad_interrupt>
  28:	94 c2       	rjmp	.+1320   	; 0x552 <__vector_20>

0000002a <__trampolines_end>:
  2a:	3f 06       	cpc	r3, r31
  2c:	5b 4f       	sbci	r21, 0xFB	; 251
  2e:	66 6d       	ori	r22, 0xD6	; 214
  30:	7d 07       	cpc	r23, r29
  32:	7f 6f       	ori	r23, 0xFF	; 255

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ed       	ldi	r28, 0xDF	; 223
  3a:	cd bf       	out	0x3d, r28	; 61

0000003c <__do_copy_data>:
  3c:	10 e0       	ldi	r17, 0x00	; 0
  3e:	a0 e6       	ldi	r26, 0x60	; 96
  40:	b0 e0       	ldi	r27, 0x00	; 0
  42:	e8 e1       	ldi	r30, 0x18	; 24
  44:	f6 e0       	ldi	r31, 0x06	; 6
  46:	02 c0       	rjmp	.+4      	; 0x4c <__SREG__+0xd>
  48:	05 90       	lpm	r0, Z+
  4a:	0d 92       	st	X+, r0
  4c:	a2 36       	cpi	r26, 0x62	; 98
  4e:	b1 07       	cpc	r27, r17
  50:	d9 f7       	brne	.-10     	; 0x48 <__SREG__+0x9>

00000052 <__do_clear_bss>:
  52:	20 e0       	ldi	r18, 0x00	; 0
  54:	a2 e6       	ldi	r26, 0x62	; 98
  56:	b0 e0       	ldi	r27, 0x00	; 0
  58:	01 c0       	rjmp	.+2      	; 0x5c <.do_clear_bss_start>

0000005a <.do_clear_bss_loop>:
  5a:	1d 92       	st	X+, r1

0000005c <.do_clear_bss_start>:
  5c:	a9 37       	cpi	r26, 0x79	; 121
  5e:	b2 07       	cpc	r27, r18
  60:	e1 f7       	brne	.-8      	; 0x5a <.do_clear_bss_loop>
  62:	82 d0       	rcall	.+260    	; 0x168 <main>
  64:	d7 c2       	rjmp	.+1454   	; 0x614 <_exit>

00000066 <__bad_interrupt>:
  66:	cc cf       	rjmp	.-104    	; 0x0 <__vectors>

00000068 <_Z11SRwriteByteh>:
	else PORTB &= ~(1 << PINB4);
	_delay_us(1);
}

void SRwriteByte(uint8_t data) 			//Shift register write byte
{
  68:	98 e0       	ldi	r25, 0x08	; 8
	_delay_us(1);
}

inline void SRIN(bool x)				//Shift register input
{
	if (x) PORTB |= 1 << PINB4;
  6a:	88 23       	and	r24, r24
  6c:	14 f4       	brge	.+4      	; 0x72 <_Z11SRwriteByteh+0xa>
  6e:	c4 9a       	sbi	0x18, 4	; 24
  70:	01 c0       	rjmp	.+2      	; 0x74 <_Z11SRwriteByteh+0xc>
	else PORTB &= ~(1 << PINB4);
  72:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  74:	22 e0       	ldi	r18, 0x02	; 2
  76:	2a 95       	dec	r18
  78:	f1 f7       	brne	.-4      	; 0x76 <_Z11SRwriteByteh+0xe>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <_Z11SRwriteByteh+0x14>
	_delay_us(1);
}

inline void SRclock()					//Shift register clock data
{
	PORTB |= 1 << PINB6;
  7c:	c6 9a       	sbi	0x18, 6	; 24
  7e:	22 e0       	ldi	r18, 0x02	; 2
  80:	2a 95       	dec	r18
  82:	f1 f7       	brne	.-4      	; 0x80 <_Z11SRwriteByteh+0x18>
  84:	00 c0       	rjmp	.+0      	; 0x86 <_Z11SRwriteByteh+0x1e>
	_delay_us(1);
	PORTB &= ~(1 << PINB6);
  86:	c6 98       	cbi	0x18, 6	; 24
  88:	22 e0       	ldi	r18, 0x02	; 2
  8a:	2a 95       	dec	r18
  8c:	f1 f7       	brne	.-4      	; 0x8a <_Z11SRwriteByteh+0x22>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <_Z11SRwriteByteh+0x28>
{
	for (uint8_t i=0; i<8; ++i)
	{
		SRIN(data & 0x80);
		SRclock();
		data <<= 1; 
  90:	88 0f       	add	r24, r24
  92:	91 50       	subi	r25, 0x01	; 1
	_delay_us(1);
}

void SRwriteByte(uint8_t data) 			//Shift register write byte
{
	for (uint8_t i=0; i<8; ++i)
  94:	51 f7       	brne	.-44     	; 0x6a <_Z11SRwriteByteh+0x2>
	{
		SRIN(data & 0x80);
		SRclock();
		data <<= 1; 
	} 
}
  96:	08 95       	ret

00000098 <_Z10introBEEPSv>:
	PORTB |= (1 << d) & 0x0f;
}

inline void beeper(bool x)					//Changes beeper pin to 1 or 0 effectively turning the beeper on and off
{
	if (x) PORTD |= 1 << PINBEEPER;
  98:	92 9a       	sbi	0x12, 2	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	8f e3       	ldi	r24, 0x3F	; 63
  9c:	9c e9       	ldi	r25, 0x9C	; 156
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <_Z10introBEEPSv+0x6>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <_Z10introBEEPSv+0xc>
  a4:	00 00       	nop
	else PORTD &= ~(1 << PINBEEPER);
  a6:	92 98       	cbi	0x12, 2	; 18
  a8:	9f ef       	ldi	r25, 0xFF	; 255
  aa:	21 ee       	ldi	r18, 0xE1	; 225
  ac:	84 e0       	ldi	r24, 0x04	; 4
  ae:	91 50       	subi	r25, 0x01	; 1
  b0:	20 40       	sbci	r18, 0x00	; 0
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <_Z10introBEEPSv+0x16>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <_Z10introBEEPSv+0x20>
  b8:	00 00       	nop
	PORTB |= (1 << d) & 0x0f;
}

inline void beeper(bool x)					//Changes beeper pin to 1 or 0 effectively turning the beeper on and off
{
	if (x) PORTD |= 1 << PINBEEPER;
  ba:	92 9a       	sbi	0x12, 2	; 18
  bc:	8f e3       	ldi	r24, 0x3F	; 63
  be:	9c e9       	ldi	r25, 0x9C	; 156
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <_Z10introBEEPSv+0x28>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <_Z10introBEEPSv+0x2e>
  c6:	00 00       	nop
	else PORTD &= ~(1 << PINBEEPER);
  c8:	92 98       	cbi	0x12, 2	; 18
  ca:	9f ef       	ldi	r25, 0xFF	; 255
  cc:	20 e7       	ldi	r18, 0x70	; 112
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	91 50       	subi	r25, 0x01	; 1
  d2:	20 40       	sbci	r18, 0x00	; 0
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <_Z10introBEEPSv+0x38>
  d8:	00 c0       	rjmp	.+0      	; 0xda <_Z10introBEEPSv+0x42>
  da:	00 00       	nop
	PORTB |= (1 << d) & 0x0f;
}

inline void beeper(bool x)					//Changes beeper pin to 1 or 0 effectively turning the beeper on and off
{
	if (x) PORTD |= 1 << PINBEEPER;
  dc:	92 9a       	sbi	0x12, 2	; 18
  de:	8f e3       	ldi	r24, 0x3F	; 63
  e0:	9c e9       	ldi	r25, 0x9C	; 156
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <__stack+0x3>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <__stack+0x9>
  e8:	00 00       	nop
	else PORTD &= ~(1 << PINBEEPER);
  ea:	92 98       	cbi	0x12, 2	; 18
  ec:	9f ef       	ldi	r25, 0xFF	; 255
  ee:	20 e7       	ldi	r18, 0x70	; 112
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	91 50       	subi	r25, 0x01	; 1
  f4:	20 40       	sbci	r18, 0x00	; 0
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <__stack+0x13>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <__stack+0x1d>
  fc:	00 00       	nop
	PORTB |= (1 << d) & 0x0f;
}

inline void beeper(bool x)					//Changes beeper pin to 1 or 0 effectively turning the beeper on and off
{
	if (x) PORTD |= 1 << PINBEEPER;
  fe:	92 9a       	sbi	0x12, 2	; 18
 100:	8f e3       	ldi	r24, 0x3F	; 63
 102:	9c e9       	ldi	r25, 0x9C	; 156
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <__stack+0x25>
 108:	00 c0       	rjmp	.+0      	; 0x10a <__stack+0x2b>
 10a:	00 00       	nop
	else PORTD &= ~(1 << PINBEEPER);
 10c:	92 98       	cbi	0x12, 2	; 18
 10e:	9f ef       	ldi	r25, 0xFF	; 255
 110:	21 ee       	ldi	r18, 0xE1	; 225
 112:	84 e0       	ldi	r24, 0x04	; 4
 114:	91 50       	subi	r25, 0x01	; 1
 116:	20 40       	sbci	r18, 0x00	; 0
 118:	80 40       	sbci	r24, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <__stack+0x35>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <__stack+0x3f>
 11e:	00 00       	nop
	PORTB |= (1 << d) & 0x0f;
}

inline void beeper(bool x)					//Changes beeper pin to 1 or 0 effectively turning the beeper on and off
{
	if (x) PORTD |= 1 << PINBEEPER;
 120:	92 9a       	sbi	0x12, 2	; 18
 122:	8f e3       	ldi	r24, 0x3F	; 63
 124:	9c e9       	ldi	r25, 0x9C	; 156
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <__stack+0x47>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <__stack+0x4d>
 12c:	00 00       	nop
	else PORTD &= ~(1 << PINBEEPER);
 12e:	92 98       	cbi	0x12, 2	; 18
 130:	9f ef       	ldi	r25, 0xFF	; 255
 132:	21 ee       	ldi	r18, 0xE1	; 225
 134:	84 e0       	ldi	r24, 0x04	; 4
 136:	91 50       	subi	r25, 0x01	; 1
 138:	20 40       	sbci	r18, 0x00	; 0
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <__stack+0x57>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <__stack+0x61>
 140:	00 00       	nop
 142:	08 95       	ret

00000144 <_Z7doBEEPSv>:
	_delay_ms(200);
}

void doBEEPS()
{
	if (doBEEP)
 144:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <doBEEP>
 148:	88 23       	and	r24, r24
 14a:	69 f0       	breq	.+26     	; 0x166 <_Z7doBEEPSv+0x22>
	PORTB |= (1 << d) & 0x0f;
}

inline void beeper(bool x)					//Changes beeper pin to 1 or 0 effectively turning the beeper on and off
{
	if (x) PORTD |= 1 << PINBEEPER;
 14c:	92 9a       	sbi	0x12, 2	; 18
 14e:	8f e3       	ldi	r24, 0x3F	; 63
 150:	9c e9       	ldi	r25, 0x9C	; 156
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <_Z7doBEEPSv+0xe>
 156:	00 c0       	rjmp	.+0      	; 0x158 <_Z7doBEEPSv+0x14>
 158:	00 00       	nop
	else PORTD &= ~(1 << PINBEEPER);
 15a:	92 98       	cbi	0x12, 2	; 18
void doBEEPS()
{
	if (doBEEP)
	{
		BEEP();
		--doBEEP;
 15c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <doBEEP>
 160:	81 50       	subi	r24, 0x01	; 1
 162:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <doBEEP>
 166:	08 95       	ret

00000168 <main>:
	PCMSK2  = 0b00000000;
}

inline void setupTIMERS()
{
	TIMSK  = 0b00000010;   //overflow interrupt
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	89 bf       	out	0x39, r24	; 57
	TCCR0B = 0b00000010;   //clock source = CLK/256 , start PWM
 16c:	83 bf       	out	0x33, r24	; 51
	TCCR0A = 0b00000011;   //PWM
 16e:	83 e0       	ldi	r24, 0x03	; 3
 170:	80 bf       	out	0x30, r24	; 48

	MCUCR  = 0b01110000;  //Power down mode	
 172:	90 e7       	ldi	r25, 0x70	; 112
 174:	95 bf       	out	0x35, r25	; 53
	UCSRB = (0 << TXEN);
}

inline void setupPINS()	//Data direction registers and pull up resistor configuration
{
	GIMSK   = 0b00010000;	//Enable pin change 1 interrupts (used in later iteration of the code)
 176:	90 e1       	ldi	r25, 0x10	; 16
 178:	9b bf       	out	0x3b, r25	; 59
	
	DDRA	= 0b00000000;	//PINA0 sensorA input - PINA1 sensor B input
 17a:	1a ba       	out	0x1a, r1	; 26
	PORTA	= 0b00000011;
 17c:	8b bb       	out	0x1b, r24	; 27
	DDRB	= 0b01111111;	//PINB4..6 shift register control (4 data, 5 latch, 6 clock) - PINB0..3 digit select
 17e:	8f e7       	ldi	r24, 0x7F	; 127
 180:	87 bb       	out	0x17, r24	; 23
	PORTB	= 0b00000000;
 182:	18 ba       	out	0x18, r1	; 24
	DDRD	= 0b01000100;	//PIND2 beeper output - PIND3 button input - PIND0 provides vcc for  - PIND6 provides vcc for the shift register and sensors and is low during sleep - PIND5 toggled in interrupt
 184:	84 e4       	ldi	r24, 0x44	; 68
 186:	81 bb       	out	0x11, r24	; 17
 	PORTD	= 0b01011000;
 188:	88 e5       	ldi	r24, 0x58	; 88
 18a:	82 bb       	out	0x12, r24	; 18
{
	//setupUART();	//Beeper cannot function using UART so we disable transmit with cltrans() - UART is for debuggig purposes
	setupTIMERS();
	setupPINS();
	
	CLKPR = 0x80;	//Enable prescaler change
 18c:	80 e8       	ldi	r24, 0x80	; 128
 18e:	86 bd       	out	0x26, r24	; 38
	CLKPR = 0x01;	//Prescale clock by /2
 190:	c1 e0       	ldi	r28, 0x01	; 1
 192:	c6 bd       	out	0x26, r28	; 38
	 
	sei();
 194:	78 94       	sei

	//cltrans();
	
	introBEEPS();
 196:	80 df       	rcall	.-256    	; 0x98 <_Z10introBEEPSv>
	timerSecs = 0;
}

inline void timerInit()
{
	timerState = 0;
 198:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <timerState>
	}
}

inline void timerReset()					//Resets the timer and sets to trigger position
{
	timerSleep = 0;
 19c:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <timerSleep+0x1>
 1a0:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <timerSleep>
	timerState = 0;
 1a4:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <timerState>
	timerusecs = 0;
 1a8:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <timerusecs+0x1>
 1ac:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <timerusecs>
	timerMsecs = 0;
 1b0:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <timerMsecs+0x1>
 1b4:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <timerMsecs>
	timerSecs = 0;
 1b8:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <timerSecs>

inline void enableSensor(uint8_t x) //Takes 0 or 1 as input and enables sensor 0 or 1
{
	if (x <= 1)
	{
		PCMSK2  = 1 << x;
 1bc:	c5 b9       	out	0x05, r28	; 5
inline void timerInit()
{
	timerState = 0;
	timerReset();
	enableSensor(0);
	sensor0ArmedPosition = sensor0;
 1be:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <sensor0>
 1c2:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <sensor0ArmedPosition>
	sensor1ArmedPosition = sensor1;
 1c6:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <sensor1>
 1ca:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <sensor1ArmedPosition>
{
	if (((*PINX & (1 << PINXno))) == 0)
	{
		if (!bState && timer > msDebounce)
		{
			bState = 1;
 1ce:	aa 24       	eor	r10, r10
 1d0:	a3 94       	inc	r10

inline void enableSensor(uint8_t x) //Takes 0 or 1 as input and enables sensor 0 or 1
{
	if (x <= 1)
	{
		PCMSK2  = 1 << x;
 1d2:	68 94       	set
 1d4:	88 24       	eor	r8, r8
 1d6:	81 f8       	bld	r8, 1
	digit >= 3? digit = 0 : ++digit;
}

inline void calcTimer()
{
	digits[0] = timerSecs % 10;
 1d8:	c7 e6       	ldi	r28, 0x67	; 103
 1da:	d0 e0       	ldi	r29, 0x00	; 0
 1dc:	0f 2e       	mov	r0, r31
 1de:	fa e0       	ldi	r31, 0x0A	; 10
 1e0:	bf 2e       	mov	r11, r31
 1e2:	f0 2d       	mov	r31, r0
	digits[1] = timerMsecs / 100;
 1e4:	0f 2e       	mov	r0, r31
 1e6:	f4 e6       	ldi	r31, 0x64	; 100
 1e8:	ef 2e       	mov	r14, r31
 1ea:	f1 2c       	mov	r15, r1
 1ec:	f0 2d       	mov	r31, r0
	digits[2] = (timerMsecs % 100) / 10;
 1ee:	0a e0       	ldi	r16, 0x0A	; 10
 1f0:	10 e0       	ldi	r17, 0x00	; 0
}

inline void digitDisplayed(uint8_t d)		// 8.8.8.8. OFF  -  accepts 0-4 as input and displays the said digit or turns off for 4
{											// 0 1 2 3  4
	PORTB &= 0xf0;
	PORTB |= (1 << d) & 0x0f;
 1f2:	cc 24       	eor	r12, r12
 1f4:	c3 94       	inc	r12
 1f6:	d1 2c       	mov	r13, r1
{
	if (((*PINX & (1 << PINXno))) == 0)
	{
		if (!bState && timer > msDebounce)
		{
			bState = 1;
 1f8:	9a 2c       	mov	r9, r10
	timerSleep = 0;
}

inline void buttonCheck(bool& bState, volatile uint8_t& timer, volatile const uint8_t* PINX, const uint8_t PINXno, const uint8_t msDebounce = 50) //Software debounced button check
{
	if (((*PINX & (1 << PINXno))) == 0)
 1fa:	83 99       	sbic	0x10, 3	; 16
 1fc:	42 c0       	rjmp	.+132    	; 0x282 <main+0x11a>
	{
		if (!bState && timer > msDebounce)
 1fe:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <buttonState>
 202:	81 11       	cpse	r24, r1
 204:	47 c0       	rjmp	.+142    	; 0x294 <main+0x12c>
 206:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <timerButton>
 20a:	83 33       	cpi	r24, 0x33	; 51
 20c:	08 f0       	brcs	.+2      	; 0x210 <main+0xa8>
 20e:	09 c1       	rjmp	.+530    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 210:	41 c0       	rjmp	.+130    	; 0x294 <main+0x12c>
	sensor1ArmedPosition = sensor1;
}

inline void buttonAction()
{
	timerState >= 2? timerState = 0 : ++timerState;
 212:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <timerState>
 216:	05 c0       	rjmp	.+10     	; 0x222 <main+0xba>
 218:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <timerState>
 21c:	8f 5f       	subi	r24, 0xFF	; 255
 21e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <timerState>
	if (timerState == 0)
 222:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <timerState>
 226:	81 11       	cpse	r24, r1
 228:	1a c0       	rjmp	.+52     	; 0x25e <main+0xf6>
	}
}

inline void timerReset()					//Resets the timer and sets to trigger position
{
	timerSleep = 0;
 22a:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <timerSleep+0x1>
 22e:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <timerSleep>
	timerState = 0;
 232:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <timerState>
	timerusecs = 0;
 236:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <timerusecs+0x1>
 23a:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <timerusecs>
	timerMsecs = 0;
 23e:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <timerMsecs+0x1>
 242:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <timerMsecs>
	timerSecs = 0;
 246:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <timerSecs>

inline void enableSensor(uint8_t x) //Takes 0 or 1 as input and enables sensor 0 or 1
{
	if (x <= 1)
	{
		PCMSK2  = 1 << x;
 24a:	a5 b8       	out	0x05, r10	; 5
	timerState >= 2? timerState = 0 : ++timerState;
	if (timerState == 0)
	{
		timerReset();
		enableSensor(0);
		sensor0ArmedPosition = sensor0;
 24c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <sensor0>
 250:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <sensor0ArmedPosition>
		sensor1ArmedPosition = sensor1;
 254:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <sensor1>
 258:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <sensor1ArmedPosition>
 25c:	05 c0       	rjmp	.+10     	; 0x268 <main+0x100>
	}
	else if (timerState == 1) enableSensor(1);
 25e:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <timerState>
 262:	81 30       	cpi	r24, 0x01	; 1
 264:	09 f4       	brne	.+2      	; 0x268 <main+0x100>

inline void enableSensor(uint8_t x) //Takes 0 or 1 as input and enables sensor 0 or 1
{
	if (x <= 1)
	{
		PCMSK2  = 1 << x;
 266:	85 b8       	out	0x05, r8	; 5
	PORTB |= (1 << d) & 0x0f;
}

inline void beeper(bool x)					//Changes beeper pin to 1 or 0 effectively turning the beeper on and off
{
	if (x) PORTD |= 1 << PINBEEPER;
 268:	92 9a       	sbi	0x12, 2	; 18
 26a:	8f e3       	ldi	r24, 0x3F	; 63
 26c:	9c e9       	ldi	r25, 0x9C	; 156
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <main+0x106>
 272:	00 c0       	rjmp	.+0      	; 0x274 <main+0x10c>
 274:	00 00       	nop
	else PORTD &= ~(1 << PINBEEPER);
 276:	92 98       	cbi	0x12, 2	; 18
		sensor0ArmedPosition = sensor0;
		sensor1ArmedPosition = sensor1;
	}
	else if (timerState == 1) enableSensor(1);
	BEEP();
	timerSleep = 0;
 278:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <timerSleep+0x1>
 27c:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <timerSleep>
 280:	09 c0       	rjmp	.+18     	; 0x294 <main+0x12c>
			buttonAction();
		}
	}
	else
	{
		if (bState && (timer > msDebounce))
 282:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <buttonState>
 286:	88 23       	and	r24, r24
 288:	29 f0       	breq	.+10     	; 0x294 <main+0x12c>
 28a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <timerButton>
 28e:	83 33       	cpi	r24, 0x33	; 51
 290:	08 f0       	brcs	.+2      	; 0x294 <main+0x12c>
 292:	d1 c0       	rjmp	.+418    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
	digit >= 3? digit = 0 : ++digit;
}

inline void calcTimer()
{
	digits[0] = timerSecs % 10;
 294:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <timerSecs>
 298:	6b 2d       	mov	r22, r11
 29a:	9c d1       	rcall	.+824    	; 0x5d4 <__udivmodqi4>
 29c:	98 83       	st	Y, r25
	digits[1] = timerMsecs / 100;
 29e:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <timerMsecs>
 2a2:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <timerMsecs+0x1>
 2a6:	b7 01       	movw	r22, r14
 2a8:	a1 d1       	rcall	.+834    	; 0x5ec <__udivmodhi4>
 2aa:	69 83       	std	Y+1, r22	; 0x01
	digits[2] = (timerMsecs % 100) / 10;
 2ac:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <timerMsecs>
 2b0:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <timerMsecs+0x1>
 2b4:	b7 01       	movw	r22, r14
 2b6:	9a d1       	rcall	.+820    	; 0x5ec <__udivmodhi4>
 2b8:	b8 01       	movw	r22, r16
 2ba:	98 d1       	rcall	.+816    	; 0x5ec <__udivmodhi4>
 2bc:	6a 83       	std	Y+2, r22	; 0x02
	digits[3] = timerMsecs % 10;
 2be:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <timerMsecs>
 2c2:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <timerMsecs+0x1>
 2c6:	b8 01       	movw	r22, r16
 2c8:	91 d1       	rcall	.+802    	; 0x5ec <__udivmodhi4>
 2ca:	8b 83       	std	Y+3, r24	; 0x03

inline void displayTimer()
{
	static uint8_t digit = 0;
	
	uint8_t toDisplay = ~pgm_read_byte( &displayBitmap[ digits[digit] ] );
 2cc:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <_ZZ12displayTimervE5digit>
 2d0:	e9 2f       	mov	r30, r25
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	e9 59       	subi	r30, 0x99	; 153
 2d6:	ff 4f       	sbci	r31, 0xFF	; 255
 2d8:	e0 81       	ld	r30, Z
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	e6 5d       	subi	r30, 0xD6	; 214
 2de:	ff 4f       	sbci	r31, 0xFF	; 255
 2e0:	84 91       	lpm	r24, Z
 2e2:	80 95       	com	r24
	
	if (digit == 0) toDisplay &= ~0x80;
 2e4:	91 11       	cpse	r25, r1
 2e6:	07 c0       	rjmp	.+14     	; 0x2f6 <main+0x18e>
 2e8:	8f 77       	andi	r24, 0x7F	; 127
	
	static uint8_t blinkmask = 0xff;
	if (timerState == 0)
 2ea:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <timerState>
 2ee:	22 23       	and	r18, r18
 2f0:	09 f4       	brne	.+2      	; 0x2f4 <main+0x18c>
 2f2:	a6 c0       	rjmp	.+332    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 2f4:	24 c0       	rjmp	.+72     	; 0x33e <main+0x1d6>
 2f6:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <timerState>
 2fa:	21 11       	cpse	r18, r1
 2fc:	11 c0       	rjmp	.+34     	; 0x320 <main+0x1b8>
	{
		toDisplay |= blinkmask;
 2fe:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 302:	82 2b       	or	r24, r18
		if (timerDisplay >= 790)
 304:	40 91 77 00 	lds	r20, 0x0077	; 0x800077 <timerDisplay>
 308:	50 91 78 00 	lds	r21, 0x0078	; 0x800078 <timerDisplay+0x1>
 30c:	46 31       	cpi	r20, 0x16	; 22
 30e:	53 40       	sbci	r21, 0x03	; 3
 310:	38 f0       	brcs	.+14     	; 0x320 <main+0x1b8>
		{
			blinkmask ^= 0xff;
 312:	20 95       	com	r18
 314:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
			timerDisplay = 0;
 318:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <timerDisplay+0x1>
 31c:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <timerDisplay>
		}
	}
	
	if (digit == 2)
 320:	92 30       	cpi	r25, 0x02	; 2
 322:	31 f4       	brne	.+12     	; 0x330 <main+0x1c8>
	{
		if (PIND & (1 << PIND1)) toDisplay |= 0x80;
 324:	81 9b       	sbis	0x10, 1	; 16
 326:	02 c0       	rjmp	.+4      	; 0x32c <main+0x1c4>
 328:	80 68       	ori	r24, 0x80	; 128
 32a:	09 c0       	rjmp	.+18     	; 0x33e <main+0x1d6>
		else toDisplay &= ~0x80;
 32c:	8f 77       	andi	r24, 0x7F	; 127
 32e:	07 c0       	rjmp	.+14     	; 0x33e <main+0x1d6>
	}
	else if (digit == 3)
 330:	93 30       	cpi	r25, 0x03	; 3
 332:	29 f4       	brne	.+10     	; 0x33e <main+0x1d6>
	{		
		if (PIND & (1 << PIND0)) toDisplay |= 0x80;
 334:	80 9b       	sbis	0x10, 0	; 16
 336:	02 c0       	rjmp	.+4      	; 0x33c <main+0x1d4>
 338:	80 68       	ori	r24, 0x80	; 128
 33a:	01 c0       	rjmp	.+2      	; 0x33e <main+0x1d6>
		else toDisplay &= ~0x80;
 33c:	8f 77       	andi	r24, 0x7F	; 127
	}
	
	SRwriteByte(toDisplay);
 33e:	94 de       	rcall	.-728    	; 0x68 <_Z11SRwriteByteh>
	} 
}

inline void digitDisplayed(uint8_t d)		// 8.8.8.8. OFF  -  accepts 0-4 as input and displays the said digit or turns off for 4
{											// 0 1 2 3  4
	PORTB &= 0xf0;
 340:	88 b3       	in	r24, 0x18	; 24
 342:	80 7f       	andi	r24, 0xF0	; 240
 344:	88 bb       	out	0x18, r24	; 24
	PORTB |= (1 << d) & 0x0f;
 346:	88 b3       	in	r24, 0x18	; 24
 348:	88 bb       	out	0x18, r24	; 24
	MCUCR  = 0b01110000;  //Power down mode	
}

inline void SRlatch()					//Shift register latch
{
	PORTB |= 1 << PINB5;
 34a:	c5 9a       	sbi	0x18, 5	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 34c:	42 e0       	ldi	r20, 0x02	; 2
 34e:	4a 95       	dec	r20
 350:	f1 f7       	brne	.-4      	; 0x34e <main+0x1e6>
 352:	00 c0       	rjmp	.+0      	; 0x354 <main+0x1ec>
	_delay_us(1);
	PORTB &= ~(1 << PINB5);
 354:	c5 98       	cbi	0x18, 5	; 24
 356:	52 e0       	ldi	r21, 0x02	; 2
 358:	5a 95       	dec	r21
 35a:	f1 f7       	brne	.-4      	; 0x358 <main+0x1f0>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <main+0x1f6>
	}
	
	SRwriteByte(toDisplay);
	digitDisplayed(4);
	SRlatch();
	digitDisplayed(digit);
 35e:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <_ZZ12displayTimervE5digit>
	} 
}

inline void digitDisplayed(uint8_t d)		// 8.8.8.8. OFF  -  accepts 0-4 as input and displays the said digit or turns off for 4
{											// 0 1 2 3  4
	PORTB &= 0xf0;
 362:	88 b3       	in	r24, 0x18	; 24
 364:	80 7f       	andi	r24, 0xF0	; 240
 366:	88 bb       	out	0x18, r24	; 24
	PORTB |= (1 << d) & 0x0f;
 368:	98 b3       	in	r25, 0x18	; 24
 36a:	a6 01       	movw	r20, r12
 36c:	02 c0       	rjmp	.+4      	; 0x372 <main+0x20a>
 36e:	44 0f       	add	r20, r20
 370:	55 1f       	adc	r21, r21
 372:	2a 95       	dec	r18
 374:	e2 f7       	brpl	.-8      	; 0x36e <main+0x206>
 376:	84 2f       	mov	r24, r20
 378:	8f 70       	andi	r24, 0x0F	; 15
 37a:	89 2b       	or	r24, r25
 37c:	88 bb       	out	0x18, r24	; 24
	SRwriteByte(toDisplay);
	digitDisplayed(4);
	SRlatch();
	digitDisplayed(digit);
	
	digit >= 3? digit = 0 : ++digit;
 37e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <_ZZ12displayTimervE5digit>
 382:	83 30       	cpi	r24, 0x03	; 3
 384:	18 f0       	brcs	.+6      	; 0x38c <main+0x224>
 386:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <_ZZ12displayTimervE5digit>
 38a:	03 c0       	rjmp	.+6      	; 0x392 <main+0x22a>
 38c:	8f 5f       	subi	r24, 0xFF	; 255
 38e:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <_ZZ12displayTimervE5digit>
		
		calcTimer();
		
		displayTimer();
		
		doBEEPS();
 392:	d8 de       	rcall	.-592    	; 0x144 <_Z7doBEEPSv>
		
		//readSensors();
		
		//sensorAction();
		
		if (timerSleep > 60000)
 394:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <timerSleep>
 398:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <timerSleep+0x1>
 39c:	81 36       	cpi	r24, 0x61	; 97
 39e:	9a 4e       	sbci	r25, 0xEA	; 234
 3a0:	08 f4       	brcc	.+2      	; 0x3a4 <main+0x23c>
 3a2:	2b cf       	rjmp	.-426    	; 0x1fa <main+0x92>
 	PORTD	= 0b01011000;
}

inline void setupPINSsleep()	//Data direction registers and pull up resistor configuration for sleep
{
	GIMSK   = 0b10000000;	//Enable INT1 interrupt so that the pushbutton can trigger it and wake up the chip
 3a4:	80 e8       	ldi	r24, 0x80	; 128
 3a6:	8b bf       	out	0x3b, r24	; 59
	PCMSK2  = 0b00000000;	//Disable sensors (used in later iteration of the code)
 3a8:	15 b8       	out	0x05, r1	; 5
	
	DDRA	= 0b00000000;	//Set all pins to tri state without pull up resistors
 3aa:	1a ba       	out	0x1a, r1	; 26
	PORTA	= 0b00000000;
 3ac:	1b ba       	out	0x1b, r1	; 27
	DDRB	= 0b00000000;	
 3ae:	17 ba       	out	0x17, r1	; 23
	PORTB	= 0b00000000;
 3b0:	18 ba       	out	0x18, r1	; 24
	DDRD	= 0b00000000;	
 3b2:	11 ba       	out	0x11, r1	; 17
	PORTD	= 0b00011000;
 3b4:	88 e1       	ldi	r24, 0x18	; 24
 3b6:	82 bb       	out	0x12, r24	; 18
	}
}

inline void disableSensors()		//Disables all sensors
{
	PCMSK2  = 0b00000000;
 3b8:	15 b8       	out	0x05, r1	; 5
		
		if (timerSleep > 60000)
		{
			setupPINSsleep();
			disableSensors();
			timerSleep = 0;
 3ba:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <timerSleep+0x1>
 3be:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <timerSleep>
			sleep_mode();
 3c2:	85 b7       	in	r24, 0x35	; 53
 3c4:	80 62       	ori	r24, 0x20	; 32
 3c6:	85 bf       	out	0x35, r24	; 53
 3c8:	88 95       	sleep
 3ca:	85 b7       	in	r24, 0x35	; 53
 3cc:	8f 7d       	andi	r24, 0xDF	; 223
 3ce:	85 bf       	out	0x35, r24	; 53
	UCSRB = (0 << TXEN);
}

inline void setupPINS()	//Data direction registers and pull up resistor configuration
{
	GIMSK   = 0b00010000;	//Enable pin change 1 interrupts (used in later iteration of the code)
 3d0:	80 e1       	ldi	r24, 0x10	; 16
 3d2:	8b bf       	out	0x3b, r24	; 59
	
	DDRA	= 0b00000000;	//PINA0 sensorA input - PINA1 sensor B input
 3d4:	1a ba       	out	0x1a, r1	; 26
	PORTA	= 0b00000011;
 3d6:	83 e0       	ldi	r24, 0x03	; 3
 3d8:	8b bb       	out	0x1b, r24	; 27
	DDRB	= 0b01111111;	//PINB4..6 shift register control (4 data, 5 latch, 6 clock) - PINB0..3 digit select
 3da:	8f e7       	ldi	r24, 0x7F	; 127
 3dc:	87 bb       	out	0x17, r24	; 23
	PORTB	= 0b00000000;
 3de:	18 ba       	out	0x18, r1	; 24
	DDRD	= 0b01000100;	//PIND2 beeper output - PIND3 button input - PIND0 provides vcc for  - PIND6 provides vcc for the shift register and sensors and is low during sleep - PIND5 toggled in interrupt
 3e0:	84 e4       	ldi	r24, 0x44	; 68
 3e2:	81 bb       	out	0x11, r24	; 17
 	PORTD	= 0b01011000;
 3e4:	88 e5       	ldi	r24, 0x58	; 88
 3e6:	82 bb       	out	0x12, r24	; 18
	timerSecs = 0;
}

inline void timerInit()
{
	timerState = 0;
 3e8:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <timerState>
	}
}

inline void timerReset()					//Resets the timer and sets to trigger position
{
	timerSleep = 0;
 3ec:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <timerSleep+0x1>
 3f0:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <timerSleep>
	timerState = 0;
 3f4:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <timerState>
	timerusecs = 0;
 3f8:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <timerusecs+0x1>
 3fc:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <timerusecs>
	timerMsecs = 0;
 400:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <timerMsecs+0x1>
 404:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <timerMsecs>
	timerSecs = 0;
 408:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <timerSecs>

inline void enableSensor(uint8_t x) //Takes 0 or 1 as input and enables sensor 0 or 1
{
	if (x <= 1)
	{
		PCMSK2  = 1 << x;
 40c:	a5 b8       	out	0x05, r10	; 5
inline void timerInit()
{
	timerState = 0;
	timerReset();
	enableSensor(0);
	sensor0ArmedPosition = sensor0;
 40e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <sensor0>
 412:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <sensor0ArmedPosition>
	sensor1ArmedPosition = sensor1;
 416:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <sensor1>
 41a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <sensor1ArmedPosition>
			disableSensors();
			timerSleep = 0;
			sleep_mode();
			setupPINS();
			timerInit();
			introBEEPS();
 41e:	3c de       	rcall	.-904    	; 0x98 <_Z10introBEEPSv>
 420:	ec ce       	rjmp	.-552    	; 0x1fa <main+0x92>
{
	if (((*PINX & (1 << PINXno))) == 0)
	{
		if (!bState && timer > msDebounce)
		{
			bState = 1;
 422:	90 92 70 00 	sts	0x0070, r9	; 0x800070 <buttonState>
			timer = 0;
 426:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <timerButton>
	sensor1ArmedPosition = sensor1;
}

inline void buttonAction()
{
	timerState >= 2? timerState = 0 : ++timerState;
 42a:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <timerState>
 42e:	82 30       	cpi	r24, 0x02	; 2
 430:	08 f0       	brcs	.+2      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 432:	ef ce       	rjmp	.-546    	; 0x212 <main+0xaa>
 434:	f1 ce       	rjmp	.-542    	; 0x218 <main+0xb0>
	}
	else
	{
		if (bState && (timer > msDebounce))
		{
			bState = 0;
 436:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <buttonState>
			timer = 0;
 43a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <timerButton>
 43e:	2a cf       	rjmp	.-428    	; 0x294 <main+0x12c>
	if (digit == 0) toDisplay &= ~0x80;
	
	static uint8_t blinkmask = 0xff;
	if (timerState == 0)
	{
		toDisplay |= blinkmask;
 440:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 444:	82 2b       	or	r24, r18
		if (timerDisplay >= 790)
 446:	40 91 77 00 	lds	r20, 0x0077	; 0x800077 <timerDisplay>
 44a:	50 91 78 00 	lds	r21, 0x0078	; 0x800078 <timerDisplay+0x1>
 44e:	46 31       	cpi	r20, 0x16	; 22
 450:	53 40       	sbci	r21, 0x03	; 3
 452:	08 f0       	brcs	.+2      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 454:	5e cf       	rjmp	.-324    	; 0x312 <main+0x1aa>
 456:	73 cf       	rjmp	.-282    	; 0x33e <main+0x1d6>

00000458 <__vector_6>:
		}
	}
}

ISR (TIMER0_OVF_vect)
{
 458:	1f 92       	push	r1
 45a:	0f 92       	push	r0
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	0f 92       	push	r0
 460:	11 24       	eor	r1, r1
 462:	0f 93       	push	r16
 464:	1f 93       	push	r17
 466:	2f 93       	push	r18
 468:	3f 93       	push	r19
 46a:	5f 93       	push	r21
 46c:	6f 93       	push	r22
 46e:	7f 93       	push	r23
 470:	8f 93       	push	r24
 472:	9f 93       	push	r25
 474:	af 93       	push	r26
 476:	bf 93       	push	r27
 478:	cf 93       	push	r28
 47a:	df 93       	push	r29
 47c:	ef 93       	push	r30
 47e:	ff 93       	push	r31
	PORTD ^= 1 << PIND5;
 480:	92 b3       	in	r25, 0x12	; 18
 482:	80 e2       	ldi	r24, 0x20	; 32
 484:	89 27       	eor	r24, r25
 486:	82 bb       	out	0x12, r24	; 18
	
	static uint8_t smallTimer = 0;
	++smallTimer;
 488:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__data_end>
 48c:	2f 5f       	subi	r18, 0xFF	; 255
 48e:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__data_end>
	
	if (timerState == 1)
 492:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <timerState>
 496:	81 30       	cpi	r24, 0x01	; 1
 498:	69 f5       	brne	.+90     	; 0x4f4 <__vector_6+0x9c>
	{
		timerusecs += 256;
 49a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <timerusecs>
 49e:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <timerusecs+0x1>
 4a2:	93 95       	inc	r25
		timerMsecs += timerusecs/1000;
 4a4:	c0 91 73 00 	lds	r28, 0x0073	; 0x800073 <timerMsecs>
 4a8:	d0 91 74 00 	lds	r29, 0x0074	; 0x800074 <timerMsecs+0x1>
 4ac:	e8 ee       	ldi	r30, 0xE8	; 232
 4ae:	f3 e0       	ldi	r31, 0x03	; 3
 4b0:	bf 01       	movw	r22, r30
 4b2:	9c d0       	rcall	.+312    	; 0x5ec <__udivmodhi4>
 4b4:	8c 01       	movw	r16, r24
 4b6:	c6 0f       	add	r28, r22
 4b8:	d7 1f       	adc	r29, r23
 4ba:	d0 93 74 00 	sts	0x0074, r29	; 0x800074 <timerMsecs+0x1>
 4be:	c0 93 73 00 	sts	0x0073, r28	; 0x800073 <timerMsecs>
		timerSecs += timerMsecs/1000;
 4c2:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <timerMsecs>
 4c6:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <timerMsecs+0x1>
 4ca:	30 91 75 00 	lds	r19, 0x0075	; 0x800075 <timerSecs>
 4ce:	bf 01       	movw	r22, r30
 4d0:	8d d0       	rcall	.+282    	; 0x5ec <__udivmodhi4>
 4d2:	63 0f       	add	r22, r19
 4d4:	60 93 75 00 	sts	0x0075, r22	; 0x800075 <timerSecs>
		timerusecs %= 1000;
 4d8:	10 93 72 00 	sts	0x0072, r17	; 0x800072 <timerusecs+0x1>
 4dc:	00 93 71 00 	sts	0x0071, r16	; 0x800071 <timerusecs>
		timerMsecs %= 1000;
 4e0:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <timerMsecs>
 4e4:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <timerMsecs+0x1>
 4e8:	bf 01       	movw	r22, r30
 4ea:	80 d0       	rcall	.+256    	; 0x5ec <__udivmodhi4>
 4ec:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <timerMsecs+0x1>
 4f0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <timerMsecs>
	}	
	
	if (smallTimer>=4) //milliseconds increment here (4 * 263us)
 4f4:	24 30       	cpi	r18, 0x04	; 4
 4f6:	c8 f0       	brcs	.+50     	; 0x52a <__vector_6+0xd2>
	{
		smallTimer = 0;
 4f8:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
		++timerButton;
 4fc:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <timerButton>
 500:	8f 5f       	subi	r24, 0xFF	; 255
 502:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <timerButton>
		++timerDisplay;
 506:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <timerDisplay>
 50a:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <timerDisplay+0x1>
 50e:	01 96       	adiw	r24, 0x01	; 1
 510:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <timerDisplay+0x1>
 514:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <timerDisplay>
		++timerSleep;
 518:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <timerSleep>
 51c:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <timerSleep+0x1>
 520:	01 96       	adiw	r24, 0x01	; 1
 522:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <timerSleep+0x1>
 526:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <timerSleep>
	}
}
 52a:	ff 91       	pop	r31
 52c:	ef 91       	pop	r30
 52e:	df 91       	pop	r29
 530:	cf 91       	pop	r28
 532:	bf 91       	pop	r27
 534:	af 91       	pop	r26
 536:	9f 91       	pop	r25
 538:	8f 91       	pop	r24
 53a:	7f 91       	pop	r23
 53c:	6f 91       	pop	r22
 53e:	5f 91       	pop	r21
 540:	3f 91       	pop	r19
 542:	2f 91       	pop	r18
 544:	1f 91       	pop	r17
 546:	0f 91       	pop	r16
 548:	0f 90       	pop	r0
 54a:	0f be       	out	0x3f, r0	; 63
 54c:	0f 90       	pop	r0
 54e:	1f 90       	pop	r1
 550:	18 95       	reti

00000552 <__vector_20>:

ISR (PCINT2_vect)
{
 552:	1f 92       	push	r1
 554:	0f 92       	push	r0
 556:	0f b6       	in	r0, 0x3f	; 63
 558:	0f 92       	push	r0
 55a:	11 24       	eor	r1, r1
 55c:	2f 93       	push	r18
 55e:	3f 93       	push	r19
 560:	8f 93       	push	r24
 562:	9f 93       	push	r25
	}
}

inline void disableSensors()		//Disables all sensors
{
	PCMSK2  = 0b00000000;
 564:	15 b8       	out	0x05, r1	; 5

ISR (PCINT2_vect)
{
	disableSensors();
	
	if (timerState == 0)
 566:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <timerState>
 56a:	81 11       	cpse	r24, r1
 56c:	0b c0       	rjmp	.+22     	; 0x584 <__vector_20+0x32>
	{
		timerState = 1;
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <timerState>

inline void enableSensor(uint8_t x) //Takes 0 or 1 as input and enables sensor 0 or 1
{
	if (x <= 1)
	{
		PCMSK2  = 1 << x;
 574:	82 e0       	ldi	r24, 0x02	; 2
 576:	85 b9       	out	0x05, r24	; 5
	
	if (timerState == 0)
	{
		timerState = 1;
		enableSensor(1);
		++doBEEP;
 578:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <doBEEP>
 57c:	8f 5f       	subi	r24, 0xFF	; 255
 57e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <doBEEP>
 582:	19 c0       	rjmp	.+50     	; 0x5b6 <__vector_20+0x64>
	}
	else if (timerState == 1)
 584:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <timerState>
 588:	81 30       	cpi	r24, 0x01	; 1
 58a:	a9 f4       	brne	.+42     	; 0x5b6 <__vector_20+0x64>
	{
		if (sensor0ArmedPosition != (PIND & (1 << PIND1)))
 58c:	80 b3       	in	r24, 0x10	; 16
 58e:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <sensor0ArmedPosition>
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	82 70       	andi	r24, 0x02	; 2
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	28 17       	cp	r18, r24
 59a:	39 07       	cpc	r19, r25
 59c:	51 f0       	breq	.+20     	; 0x5b2 <__vector_20+0x60>
		{
			timerState = 2;
 59e:	82 e0       	ldi	r24, 0x02	; 2
 5a0:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <timerState>
	}
}

inline void disableSensors()		//Disables all sensors
{
	PCMSK2  = 0b00000000;
 5a4:	15 b8       	out	0x05, r1	; 5
	{
		if (sensor0ArmedPosition != (PIND & (1 << PIND1)))
		{
			timerState = 2;
			disableSensors();
			++doBEEP;			
 5a6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <doBEEP>
 5aa:	8f 5f       	subi	r24, 0xFF	; 255
 5ac:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <doBEEP>
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <__vector_20+0x64>

inline void enableSensor(uint8_t x) //Takes 0 or 1 as input and enables sensor 0 or 1
{
	if (x <= 1)
	{
		PCMSK2  = 1 << x;
 5b2:	82 e0       	ldi	r24, 0x02	; 2
 5b4:	85 b9       	out	0x05, r24	; 5
			++doBEEP;			
		}
		else enableSensor(1);
	}
	
	timerSleep = 0;
 5b6:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <timerSleep+0x1>
 5ba:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <timerSleep>
	GIFR = 1 << PCIF2;
 5be:	80 e1       	ldi	r24, 0x10	; 16
 5c0:	8a bf       	out	0x3a, r24	; 58
}
 5c2:	9f 91       	pop	r25
 5c4:	8f 91       	pop	r24
 5c6:	3f 91       	pop	r19
 5c8:	2f 91       	pop	r18
 5ca:	0f 90       	pop	r0
 5cc:	0f be       	out	0x3f, r0	; 63
 5ce:	0f 90       	pop	r0
 5d0:	1f 90       	pop	r1
 5d2:	18 95       	reti

000005d4 <__udivmodqi4>:
 5d4:	99 1b       	sub	r25, r25
 5d6:	79 e0       	ldi	r23, 0x09	; 9
 5d8:	04 c0       	rjmp	.+8      	; 0x5e2 <__udivmodqi4_ep>

000005da <__udivmodqi4_loop>:
 5da:	99 1f       	adc	r25, r25
 5dc:	96 17       	cp	r25, r22
 5de:	08 f0       	brcs	.+2      	; 0x5e2 <__udivmodqi4_ep>
 5e0:	96 1b       	sub	r25, r22

000005e2 <__udivmodqi4_ep>:
 5e2:	88 1f       	adc	r24, r24
 5e4:	7a 95       	dec	r23
 5e6:	c9 f7       	brne	.-14     	; 0x5da <__udivmodqi4_loop>
 5e8:	80 95       	com	r24
 5ea:	08 95       	ret

000005ec <__udivmodhi4>:
 5ec:	aa 1b       	sub	r26, r26
 5ee:	bb 1b       	sub	r27, r27
 5f0:	51 e1       	ldi	r21, 0x11	; 17
 5f2:	07 c0       	rjmp	.+14     	; 0x602 <__udivmodhi4_ep>

000005f4 <__udivmodhi4_loop>:
 5f4:	aa 1f       	adc	r26, r26
 5f6:	bb 1f       	adc	r27, r27
 5f8:	a6 17       	cp	r26, r22
 5fa:	b7 07       	cpc	r27, r23
 5fc:	10 f0       	brcs	.+4      	; 0x602 <__udivmodhi4_ep>
 5fe:	a6 1b       	sub	r26, r22
 600:	b7 0b       	sbc	r27, r23

00000602 <__udivmodhi4_ep>:
 602:	88 1f       	adc	r24, r24
 604:	99 1f       	adc	r25, r25
 606:	5a 95       	dec	r21
 608:	a9 f7       	brne	.-22     	; 0x5f4 <__udivmodhi4_loop>
 60a:	80 95       	com	r24
 60c:	90 95       	com	r25
 60e:	bc 01       	movw	r22, r24
 610:	cd 01       	movw	r24, r26
 612:	08 95       	ret

00000614 <_exit>:
 614:	f8 94       	cli

00000616 <__stop_program>:
 616:	ff cf       	rjmp	.-2      	; 0x616 <__stop_program>
